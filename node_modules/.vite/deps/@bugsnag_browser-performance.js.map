{
  "version": 3,
  "sources": ["../../@bugsnag/cuid/lib/pad.js", "../../@bugsnag/cuid/lib/fingerprint.browser.js", "../../@bugsnag/cuid/index.js", "../../@bugsnag/core-performance/dist/validation.js", "../../@bugsnag/core-performance/dist/attributes.js", "../../@bugsnag/core-performance/dist/clock.js", "../../@bugsnag/core-performance/dist/config.js", "../../@bugsnag/core-performance/dist/batch-processor.js", "../../@bugsnag/core-performance/dist/events.js", "../../@bugsnag/core-performance/dist/trace-id-to-sampling-rate.js", "../../@bugsnag/core-performance/dist/span.js", "../../@bugsnag/core-performance/dist/delivery.js", "../../@bugsnag/core-performance/dist/probability-fetcher.js", "../../@bugsnag/core-performance/dist/probability-manager.js", "../../@bugsnag/core-performance/dist/processor.js", "../../@bugsnag/core-performance/dist/sampler.js", "../../@bugsnag/core-performance/dist/span-context.js", "../../@bugsnag/core-performance/dist/time.js", "../../@bugsnag/core-performance/dist/span-factory.js", "../../@bugsnag/core-performance/dist/core.js", "../../@bugsnag/core-performance/dist/persistence.js", "../../@bugsnag/core-performance/dist/retry-queue.js", "../../@bugsnag/delivery-fetch-performance/dist/delivery.js", "../../@bugsnag/request-tracker-performance/dist/network-request-callback.js", "../../@bugsnag/request-tracker-performance/dist/request-tracker.js", "../../@bugsnag/request-tracker-performance/dist/url-helpers.js", "../../@bugsnag/request-tracker-performance/dist/request-tracker-fetch.js", "../../@bugsnag/request-tracker-performance/dist/request-tracker-xhr.js", "../../@bugsnag/browser-performance/dist/send-page-attributes.js", "../../@bugsnag/browser-performance/dist/auto-instrumentation/page-load-phase-spans.js", "../../@bugsnag/browser-performance/dist/default-routing-provider.js", "../../@bugsnag/browser-performance/dist/auto-instrumentation/full-page-load-plugin.js", "../../@bugsnag/browser-performance/dist/auto-instrumentation/network-request-plugin.js", "../../@bugsnag/browser-performance/dist/auto-instrumentation/resource-load-plugin.js", "../../@bugsnag/browser-performance/dist/auto-instrumentation/route-change-plugin.js", "../../@bugsnag/browser-performance/dist/backgrounding-listener.js", "../../@bugsnag/browser-performance/dist/clock.js", "../../@bugsnag/browser-performance/dist/routing-provider.js", "../../@bugsnag/browser-performance/dist/config.js", "../../@bugsnag/browser-performance/dist/id-generator.js", "../../@bugsnag/browser-performance/dist/on-settle/settler.js", "../../@bugsnag/browser-performance/dist/on-settle/dom-mutation-settler.js", "../../@bugsnag/browser-performance/dist/on-settle/load-event-end-settler.js", "../../@bugsnag/browser-performance/dist/on-settle/request-settler.js", "../../@bugsnag/browser-performance/dist/on-settle/settler-aggregate.js", "../../@bugsnag/browser-performance/dist/on-settle/index.js", "../../@bugsnag/browser-performance/dist/persistence.js", "../../@bugsnag/browser-performance/dist/resource-attributes-source.js", "../../@bugsnag/browser-performance/dist/span-attributes-source.js", "../../@bugsnag/browser-performance/dist/web-vitals.js", "../../@bugsnag/browser-performance/dist/browser.js"],
  "sourcesContent": ["module.exports = function pad (num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n", "var pad = require('./pad.js');\n\nvar env = typeof window === 'object' ? window : self;\nvar globalCount = 0;\nfor (var prop in env) {\n  if (Object.hasOwnProperty.call(env, prop)) globalCount++;\n}\nvar mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nvar clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nmodule.exports = function fingerprint () {\n  return clientId;\n};\n", "/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nvar fingerprint = require('./lib/fingerprint.js');\nvar pad = require('./lib/pad.js');\n\nvar c = 0,\n  blockSize = 4,\n  base = 36,\n  discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock () {\n  return pad((Math.random() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter () {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nfunction cuid () {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c', // hard-coded allows for sequential access\n\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = (new Date().getTime()).toString(base),\n\n    // Prevent same-machine collisions.\n    counter = pad(safeCounter().toString(base), blockSize),\n\n    // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    print = fingerprint(),\n\n    // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.fingerprint = fingerprint;\n\nmodule.exports = cuid;\n", "const isBoolean = (value) => value === true || value === false;\nconst isObject = (value) => !!value && typeof value === 'object' && !Array.isArray(value);\nconst isNumber = (value) => typeof value === 'number' && Number.isFinite(value) && !Number.isNaN(value);\nconst isString = (value) => typeof value === 'string';\nconst isStringWithLength = (value) => isString(value) && value.length > 0;\nconst isLogger = (value) => isObject(value) &&\n    typeof value.debug === 'function' &&\n    typeof value.info === 'function' &&\n    typeof value.warn === 'function' &&\n    typeof value.error === 'function';\nconst isStringArray = (value) => Array.isArray(value) && value.every(isStringWithLength);\nconst isStringOrRegExpArray = (value) => Array.isArray(value) && value.every(item => isStringWithLength(item) || item instanceof RegExp);\nfunction isPersistedProbability(value) {\n    return isObject(value) &&\n        isNumber(value.value) &&\n        isNumber(value.time);\n}\nconst isSpanContext = (value) => isObject(value) &&\n    typeof value.id === 'string' &&\n    typeof value.traceId === 'string' &&\n    typeof value.isValid === 'function';\nfunction isTime(value) {\n    return isNumber(value) || value instanceof Date;\n}\n// NOTE: this should be kept in sync with the notifier\n// https://github.com/bugsnag/bugsnag-js/blob/next/packages/plugin-browser-device/device.js\nfunction isDeviceId(value) {\n    // make sure the persisted value looks like a valid cuid\n    return typeof value === 'string' && /^c[a-z0-9]{20,32}$/.test(value);\n}\nfunction isPlugin(value) {\n    return isObject(value) && typeof value.configure === 'function';\n}\nfunction isPluginArray(value) {\n    return Array.isArray(value) && value.every(plugin => isPlugin(plugin));\n}\n\nexport { isBoolean, isDeviceId, isLogger, isNumber, isObject, isPersistedProbability, isPlugin, isPluginArray, isSpanContext, isString, isStringArray, isStringOrRegExpArray, isStringWithLength, isTime };\n", "import { isNumber } from './validation.js';\n\nclass SpanAttributes {\n    constructor(initialValues) {\n        this.attributes = initialValues;\n    }\n    set(name, value) {\n        if (typeof value === 'string' || typeof value === 'boolean' || isNumber(value)) {\n            this.attributes.set(name, value);\n        }\n    }\n    remove(name) {\n        this.attributes.delete(name);\n    }\n    toJson() {\n        return Array.from(this.attributes).map(([key, value]) => attributeToJson(key, value));\n    }\n}\nclass ResourceAttributes extends SpanAttributes {\n    constructor(releaseStage, appVersion, sdkName, sdkVersion) {\n        const initialValues = new Map([\n            ['deployment.environment', releaseStage],\n            ['telemetry.sdk.name', sdkName],\n            ['telemetry.sdk.version', sdkVersion]\n        ]);\n        if (appVersion.length > 0) {\n            initialValues.set('service.version', appVersion);\n        }\n        super(initialValues);\n    }\n}\nfunction attributeToJson(key, attribute) {\n    switch (typeof attribute) {\n        case 'number':\n            if (Number.isNaN(attribute) || !Number.isFinite(attribute)) {\n                return undefined;\n            }\n            // 'bugsnag.sampling.p' must always be sent as a doubleValue\n            if (key !== 'bugsnag.sampling.p' && Number.isInteger(attribute)) {\n                return { key, value: { intValue: `${attribute}` } };\n            }\n            return { key, value: { doubleValue: attribute } };\n        case 'boolean':\n            return { key, value: { boolValue: attribute } };\n        case 'string':\n            return { key, value: { stringValue: attribute } };\n        default:\n            return undefined;\n    }\n}\n\nexport { ResourceAttributes, SpanAttributes, attributeToJson };\n", "const NANOSECONDS_IN_MILLISECONDS = 1000000;\nfunction millisecondsToNanoseconds(milliseconds) {\n    return Math.round(milliseconds * NANOSECONDS_IN_MILLISECONDS);\n}\n\nexport { millisecondsToNanoseconds };\n", "import { isStringWithLength, isString, isLogger, isStringArray, isNumber, isPluginArray, isObject } from './validation.js';\n\nconst schema = {\n    appVersion: {\n        defaultValue: '',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    endpoint: {\n        defaultValue: 'https://otlp.bugsnag.com/v1/traces',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    apiKey: {\n        defaultValue: '',\n        message: 'should be a 32 character hexadecimal string',\n        validate: (value) => isString(value) && /^[a-f0-9]{32}$/.test(value)\n    },\n    logger: {\n        defaultValue: {\n            debug(message) { console.debug(message); },\n            info(message) { console.info(message); },\n            warn(message) { console.warn(message); },\n            error(message) { console.error(message); }\n        },\n        message: 'should be a Logger object',\n        validate: isLogger\n    },\n    releaseStage: {\n        defaultValue: 'production',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    enabledReleaseStages: {\n        defaultValue: null,\n        message: 'should be an array of strings',\n        validate: (value) => value === null || isStringArray(value)\n    },\n    samplingProbability: {\n        defaultValue: 1.0,\n        message: 'should be a number between 0 and 1',\n        validate: (value) => isNumber(value) && value >= 0 && value <= 1\n    },\n    plugins: {\n        defaultValue: [],\n        message: 'should be an array of plugin objects',\n        validate: isPluginArray\n    }\n};\nfunction validateConfig(config, schema) {\n    if (typeof config === 'string') {\n        config = { apiKey: config };\n    }\n    if (!isObject(config) || !isString(config.apiKey) || config.apiKey.length === 0) {\n        throw new Error('No Bugsnag API Key set');\n    }\n    let warnings = '';\n    const cleanConfiguration = {};\n    for (const option of Object.keys(schema)) {\n        if (Object.prototype.hasOwnProperty.call(config, option)) {\n            if (schema[option].validate(config[option])) {\n                cleanConfiguration[option] = config[option];\n            }\n            else {\n                warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof config[option]}`;\n                cleanConfiguration[option] = schema[option].defaultValue;\n            }\n        }\n        else {\n            cleanConfiguration[option] = schema[option].defaultValue;\n        }\n    }\n    // If apiKey is set but not valid we should still use it, despite the validation warning.\n    cleanConfiguration.apiKey = config.apiKey;\n    cleanConfiguration.maximumBatchSize = config.maximumBatchSize || 100;\n    cleanConfiguration.batchInactivityTimeoutMs = config.batchInactivityTimeoutMs || 30 * 1000;\n    if (warnings.length > 0) {\n        cleanConfiguration.logger.warn(`Invalid configuration${warnings}`);\n    }\n    return cleanConfiguration;\n}\n\nexport { schema, validateConfig };\n", "class BatchProcessor {\n    constructor(delivery, configuration, retryQueue, sampler, probabilityManager, encoder) {\n        this.batch = [];\n        this.timeout = null;\n        this.delivery = delivery;\n        this.configuration = configuration;\n        this.retryQueue = retryQueue;\n        this.sampler = sampler;\n        this.probabilityManager = probabilityManager;\n        this.encoder = encoder;\n        this.flush = this.flush.bind(this);\n    }\n    stop() {\n        if (this.timeout !== null) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    start() {\n        this.stop();\n        this.timeout = setTimeout(this.flush, this.configuration.batchInactivityTimeoutMs);\n    }\n    add(span) {\n        if (this.configuration.enabledReleaseStages &&\n            !this.configuration.enabledReleaseStages.includes(this.configuration.releaseStage)) {\n            return;\n        }\n        this.batch.push(span);\n        if (this.batch.length >= this.configuration.maximumBatchSize) {\n            this.flush();\n        }\n        else {\n            this.start();\n        }\n    }\n    async flush() {\n        this.stop();\n        const batch = this.prepareBatch();\n        // we either had nothing in the batch originally or all spans were discarded\n        if (!batch) {\n            return;\n        }\n        const payload = await this.encoder.encode(batch);\n        const batchTime = Date.now();\n        try {\n            const response = await this.delivery.send(payload);\n            if (response.samplingProbability !== undefined) {\n                this.probabilityManager.setProbability(response.samplingProbability);\n            }\n            switch (response.state) {\n                case 'success':\n                    this.retryQueue.flush();\n                    break;\n                case 'failure-discard':\n                    this.configuration.logger.warn('delivery failed');\n                    break;\n                case 'failure-retryable':\n                    this.configuration.logger.info('delivery failed, adding to retry queue');\n                    this.retryQueue.add(payload, batchTime);\n                    break;\n                default:\n                    response.state;\n            }\n        }\n        catch (err) {\n            this.configuration.logger.warn('delivery failed');\n        }\n    }\n    prepareBatch() {\n        if (this.batch.length === 0) {\n            return;\n        }\n        // update sampling values if necessary and re-sample\n        const batch = [];\n        const probability = this.sampler.spanProbability;\n        for (const span of this.batch) {\n            if (span.samplingProbability.raw > probability.raw) {\n                span.samplingProbability = probability;\n            }\n            if (this.sampler.sample(span)) {\n                batch.push(span);\n            }\n        }\n        // clear out the current batch so we're ready to start a new one\n        this.batch = [];\n        // if every span was discarded there's nothing to send\n        if (batch.length === 0) {\n            return;\n        }\n        return batch;\n    }\n}\n\nexport { BatchProcessor };\n", "class SpanEvents {\n    constructor() {\n        this.events = [];\n    }\n    add(name, time) {\n        this.events.push({ name, time });\n    }\n    toJson(clock) {\n        return this.events.map(({ name, time }) => ({ name, timeUnixNano: clock.toUnixTimestampNanoseconds(time) }));\n    }\n}\n\nexport { SpanEvents };\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// taken from OpenTelemetry's TraceIdRatioBasedSampler:\n// https://github.com/open-telemetry/opentelemetry-js/blob/ca700c4eef64c14bb5fef2be6f08ace7973a8881/packages/opentelemetry-sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts#L47-L55\n// with some small modifications to match our naming conventions\nfunction traceIdToSamplingRate(traceId) {\n    let samplingRate = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n        const position = i * 8;\n        const segment = Number.parseInt(traceId.slice(position, position + 8), 16);\n        samplingRate = (samplingRate ^ segment) >>> 0;\n    }\n    return samplingRate;\n}\n\nexport { traceIdToSamplingRate as default };\n", "import { SpanEvents } from './events.js';\nimport traceIdToSamplingRate from './trace-id-to-sampling-rate.js';\nimport { isTime, isSpanContext, isBoolean } from './validation.js';\n\nfunction spanToJson(span, clock) {\n    return {\n        name: span.name,\n        kind: span.kind,\n        spanId: span.id,\n        traceId: span.traceId,\n        parentSpanId: span.parentSpanId,\n        startTimeUnixNano: clock.toUnixTimestampNanoseconds(span.startTime),\n        endTimeUnixNano: clock.toUnixTimestampNanoseconds(span.endTime),\n        attributes: span.attributes.toJson(),\n        events: span.events.toJson(clock)\n    };\n}\nclass SpanInternal {\n    constructor(id, traceId, name, startTime, attributes, parentSpanId) {\n        this.kind = 3 /* Kind.Client */; // TODO: How do we define the initial Kind?\n        this.events = new SpanEvents();\n        this.id = id;\n        this.traceId = traceId;\n        this.parentSpanId = parentSpanId;\n        this.name = name;\n        this.startTime = startTime;\n        this.attributes = attributes;\n        this.samplingRate = traceIdToSamplingRate(this.traceId);\n    }\n    addEvent(name, time) {\n        this.events.add(name, time);\n    }\n    setAttribute(name, value) {\n        this.attributes.set(name, value);\n    }\n    end(endTime, samplingProbability) {\n        this.endTime = endTime;\n        let _samplingProbability = samplingProbability;\n        this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n        return {\n            id: this.id,\n            name: this.name,\n            kind: this.kind,\n            traceId: this.traceId,\n            startTime: this.startTime,\n            attributes: this.attributes,\n            events: this.events,\n            samplingRate: this.samplingRate,\n            endTime,\n            get samplingProbability() {\n                return _samplingProbability;\n            },\n            set samplingProbability(samplingProbability) {\n                _samplingProbability = samplingProbability;\n                this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n            },\n            parentSpanId: this.parentSpanId\n        };\n    }\n    isValid() {\n        return this.endTime === undefined;\n    }\n}\nconst coreSpanOptionSchema = {\n    startTime: {\n        message: 'should be a number or Date',\n        getDefaultValue: () => undefined,\n        validate: isTime\n    },\n    parentContext: {\n        message: 'should be a SpanContext',\n        getDefaultValue: () => undefined,\n        validate: (value) => value === null || isSpanContext(value)\n    },\n    makeCurrentContext: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    },\n    isFirstClass: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    }\n};\n\nexport { SpanInternal, coreSpanOptionSchema, spanToJson };\n", "import { spanToJson } from './span.js';\n\nclass TracePayloadEncoder {\n    constructor(clock, configuration, resourceAttributeSource) {\n        this.clock = clock;\n        this.configuration = configuration;\n        this.resourceAttributeSource = resourceAttributeSource;\n    }\n    async encode(spans) {\n        const resourceAttributes = await this.resourceAttributeSource(this.configuration);\n        const jsonSpans = Array(spans.length);\n        for (let i = 0; i < spans.length; ++i) {\n            jsonSpans[i] = spanToJson(spans[i], this.clock);\n        }\n        const deliveryPayload = {\n            resourceSpans: [\n                {\n                    resource: { attributes: resourceAttributes.toJson() },\n                    scopeSpans: [{ spans: jsonSpans }]\n                }\n            ]\n        };\n        return {\n            body: deliveryPayload,\n            headers: {\n                'Bugsnag-Api-Key': this.configuration.apiKey,\n                'Content-Type': 'application/json',\n                'Bugsnag-Span-Sampling': this.generateSamplingHeader(spans)\n            }\n        };\n    }\n    generateSamplingHeader(spans) {\n        if (spans.length === 0) {\n            return '1:0';\n        }\n        const spanCounts = Object.create(null);\n        for (const span of spans) {\n            const existingValue = spanCounts[span.samplingProbability.raw] || 0;\n            spanCounts[span.samplingProbability.raw] = existingValue + 1;\n        }\n        const rawProbabilities = Object.keys(spanCounts);\n        const pairs = Array(rawProbabilities.length);\n        for (let i = 0; i < rawProbabilities.length; ++i) {\n            const rawProbability = rawProbabilities[i];\n            pairs[i] = `${rawProbability}:${spanCounts[rawProbability]}`;\n        }\n        return pairs.join(';');\n    }\n}\nconst retryCodes = new Set([402, 407, 408, 429]);\nfunction responseStateFromStatusCode(statusCode) {\n    if (statusCode >= 200 && statusCode < 300) {\n        return 'success';\n    }\n    if (statusCode >= 400 && statusCode < 500 && !retryCodes.has(statusCode)) {\n        return 'failure-discard';\n    }\n    return 'failure-retryable';\n}\n\nexport { TracePayloadEncoder, responseStateFromStatusCode };\n", "// the time to wait before retrying a failed request\nconst RETRY_MILLISECONDS = 30 * 1000;\nclass ProbabilityFetcher {\n    constructor(delivery, apiKey) {\n        this.delivery = delivery;\n        this.payload = {\n            body: { resourceSpans: [] },\n            headers: {\n                'Bugsnag-Api-Key': apiKey,\n                'Content-Type': 'application/json',\n                'Bugsnag-Span-Sampling': '1.0:0'\n            }\n        };\n    }\n    async getNewProbability() {\n        // keep making requests until we get a new probability value from the server\n        while (true) {\n            const response = await this.delivery.send(this.payload);\n            // in theory this should always be present, but it's possible the request\n            // fails or there's a bug on the server side causing it not to be returned\n            if (response.samplingProbability !== undefined) {\n                return response.samplingProbability;\n            }\n            await this.timeBetweenRetries();\n        }\n    }\n    timeBetweenRetries() {\n        return new Promise(resolve => {\n            setTimeout(resolve, RETRY_MILLISECONDS);\n        });\n    }\n}\n\nexport { ProbabilityFetcher as default };\n", "// the time between requests to fetch a new probability value from the server\nconst PROBABILITY_REFRESH_MILLISECONDS = 24 * 60 * 60 * 1000; // 24 hours\nclass ProbabilityManager {\n    static async create(persistence, sampler, probabilityFetcher) {\n        const persistedProbability = await persistence.load('bugsnag-sampling-probability');\n        let initialProbabilityTime;\n        let initialTimoutDuration;\n        if (persistedProbability === undefined) {\n            // If there is no stored probability:\n            // - Set the initial probability value to the default\n            sampler.probability = 1.0;\n            initialProbabilityTime = 0;\n            // - Immediately fetch a new probability value\n            initialTimoutDuration = 0;\n        }\n        else if (persistedProbability.time < Date.now() - PROBABILITY_REFRESH_MILLISECONDS) {\n            // If it is >= 24 hours old:\n            // - Set the initial probability value to the stored value\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n            // - Immediately fetch a new probability value\n            initialTimoutDuration = 0;\n        }\n        else {\n            // If it is < 24 hours old:\n            // - Use the stored probability\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n            // - Fetch a new probability when this value would be 24 hours old\n            initialTimoutDuration = PROBABILITY_REFRESH_MILLISECONDS - (Date.now() - initialProbabilityTime);\n        }\n        return new ProbabilityManager(persistence, sampler, probabilityFetcher, initialTimoutDuration, initialProbabilityTime);\n    }\n    constructor(persistence, sampler, probabilityFetcher, initialTimoutDuration, initialProbabilityTime) {\n        this.timeout = undefined;\n        this.persistence = persistence;\n        this.sampler = sampler;\n        this.probabilityFetcher = probabilityFetcher;\n        this.lastProbabilityTime = initialProbabilityTime;\n        this.fetchNewProbabilityIn(initialTimoutDuration);\n    }\n    setProbability(newProbability) {\n        this.lastProbabilityTime = Date.now();\n        this.sampler.probability = newProbability;\n        this.fetchNewProbabilityIn(PROBABILITY_REFRESH_MILLISECONDS);\n        // return this promise for convience in unit tests as it allows us to wait\n        // for persistence to finish; in real code we won't ever wait for this but\n        // there's no harm in returning it anyway\n        return this.persistence.save('bugsnag-sampling-probability', {\n            value: newProbability,\n            time: this.lastProbabilityTime\n        });\n    }\n    fetchNewProbabilityIn(milliseconds) {\n        clearTimeout(this.timeout);\n        const lastProbabilityTimeBeforeTimeout = this.lastProbabilityTime;\n        this.timeout = setTimeout(async () => {\n            const probability = await this.probabilityFetcher.getNewProbability();\n            // only apply the new probability if we haven't received another value\n            // in the meantime, e.g. from a trace request's response\n            if (lastProbabilityTimeBeforeTimeout === this.lastProbabilityTime) {\n                this.setProbability(probability);\n            }\n        }, milliseconds);\n    }\n}\n\nexport { ProbabilityManager as default };\n", "// a processor that buffers spans in memory until the client has started\n// not sure if this would need to be platform specific — will we ever care about\n// persisting spans if 'start' is never called?\nclass BufferingProcessor {\n    constructor() {\n        this.spans = [];\n    }\n    add(span) {\n        this.spans.push(span);\n    }\n}\n\nexport { BufferingProcessor };\n", "// sampling rates are stored as a number between 0 and 2^32 - 1 (i.e. they are\n// u32s) so we need to scale the probability value to match this range as they\n// are stored as values between 0 and 1\nfunction scaleProbabilityToMatchSamplingRate(probability) {\n    return Math.floor(probability * 0xffffffff);\n}\nclass Sampler {\n    constructor(initialProbability) {\n        // we could just do 'this.probability = initialProbability' but TypeScript\n        // doesn't like that as it doesn't directly initialise these properties in\n        // the constructor\n        this._probability = initialProbability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(initialProbability);\n    }\n    /**\n     * The global probability value: a number between 0 & 1\n     */\n    get probability() {\n        return this._probability;\n    }\n    set probability(probability) {\n        this._probability = probability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(probability);\n    }\n    /**\n     * The probability value for spans: a number between 0 & 2^32 - 1\n     *\n     * This is necessary because span sampling rates are generated as unsigned 32\n     * bit integers. We scale the global probability value to match that range, so\n     * that we can use a simple calculation in 'sample'\n     *\n     * @see scaleProbabilityToMatchSamplingRate\n     */\n    get spanProbability() {\n        return {\n            raw: this._probability,\n            scaled: this.scaledProbability\n        };\n    }\n    sample(span) {\n        return span.samplingRate <= span.samplingProbability.scaled;\n    }\n    shouldSample(samplingRate) {\n        return samplingRate <= this.spanProbability.scaled;\n    }\n}\n\nexport { Sampler as default };\n", "function spanContextEquals(span1, span2) {\n    if (span1 === span2)\n        return true;\n    if (span1 !== undefined && span2 !== undefined) {\n        return span1.id === span2.id && span1.traceId === span2.traceId;\n    }\n    return false;\n}\nclass DefaultSpanContextStorage {\n    constructor(backgroundingListener, contextStack = []) {\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear the context stack regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.contextStack.length = 0;\n        };\n        this.contextStack = contextStack;\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    *[Symbol.iterator]() {\n        for (let i = this.contextStack.length - 1; i >= 0; --i) {\n            yield this.contextStack[i];\n        }\n    }\n    push(context) {\n        if (context.isValid() && this.isInForeground) {\n            this.contextStack.push(context);\n        }\n    }\n    pop(context) {\n        if (spanContextEquals(context, this.current)) {\n            this.contextStack.pop();\n        }\n        this.removeClosedContexts();\n    }\n    get first() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[0]\n            : undefined;\n    }\n    get current() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[this.contextStack.length - 1]\n            : undefined;\n    }\n    removeClosedContexts() {\n        while (this.contextStack.length > 0 &&\n            this.contextStack[this.contextStack.length - 1].isValid() === false) {\n            this.contextStack.pop();\n        }\n    }\n}\n\nexport { DefaultSpanContextStorage, spanContextEquals };\n", "import { isNumber } from './validation.js';\n\nfunction timeToNumber(clock, time) {\n    if (isNumber(time)) {\n        // no need to change anything - we want to store numbers anyway\n        // we assume this is nanosecond precision\n        return time;\n    }\n    if (time instanceof Date) {\n        return clock.convert(time);\n    }\n    return clock.now();\n}\n\nexport { timeToNumber };\n", "import { SpanAttributes } from './attributes.js';\nimport { SpanInternal, coreSpanOptionSchema } from './span.js';\nimport { timeToNumber } from './time.js';\nimport { isSpanContext, isObject } from './validation.js';\n\nconst DISCARD_END_TIME = -1;\nclass SpanFactory {\n    constructor(processor, sampler, idGenerator, spanAttributesSource, clock, backgroundingListener, logger, spanContextStorage) {\n        this.openSpans = new WeakSet();\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear all open spans regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.openSpans = new WeakSet();\n        };\n        this.processor = processor;\n        this.sampler = sampler;\n        this.idGenerator = idGenerator;\n        this.spanAttributesSource = spanAttributesSource;\n        this.clock = clock;\n        this.logger = logger;\n        this.spanContextStorage = spanContextStorage;\n        // this will fire immediately if the app is already backgrounded\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    startSpan(name, options) {\n        const safeStartTime = timeToNumber(this.clock, options.startTime);\n        const spanId = this.idGenerator.generate(64);\n        // if the parentContext option is not set use the current context\n        // if parentContext is explicitly null, or there is no current context,\n        // we are starting a new root span\n        const parentContext = isSpanContext(options.parentContext) || options.parentContext === null\n            ? options.parentContext\n            : this.spanContextStorage.current;\n        const parentSpanId = parentContext ? parentContext.id : undefined;\n        const traceId = parentContext ? parentContext.traceId : this.idGenerator.generate(128);\n        const attributes = new SpanAttributes(new Map());\n        if (typeof options.isFirstClass === 'boolean') {\n            attributes.set('bugsnag.span.first_class', options.isFirstClass);\n        }\n        const span = new SpanInternal(spanId, traceId, name, safeStartTime, attributes, parentSpanId);\n        // don't track spans that are started while the app is backgrounded\n        if (this.isInForeground) {\n            this.openSpans.add(span);\n            if (options.makeCurrentContext !== false) {\n                this.spanContextStorage.push(span);\n            }\n        }\n        return span;\n    }\n    configure(processor, logger) {\n        this.processor = processor;\n        this.logger = logger;\n    }\n    endSpan(span, endTime) {\n        // if the span doesn't exist here it shouldn't be processed\n        if (!this.openSpans.delete(span)) {\n            // only warn if the span has already been ended explicitly rather than\n            // discarded by us\n            if (!span.isValid()) {\n                this.logger.warn('Attempted to end a Span which has already ended.');\n            }\n            return;\n        }\n        // Discard marked spans\n        if (endTime === DISCARD_END_TIME)\n            return;\n        this.spanAttributesSource.requestAttributes(span);\n        const spanEnded = span.end(endTime, this.sampler.spanProbability);\n        this.spanContextStorage.pop(span);\n        if (this.sampler.sample(spanEnded)) {\n            this.processor.add(spanEnded);\n        }\n    }\n    toPublicApi(span) {\n        return {\n            get id() {\n                return span.id;\n            },\n            get traceId() {\n                return span.traceId;\n            },\n            get samplingRate() {\n                return span.samplingRate;\n            },\n            isValid: () => span.isValid(),\n            end: (endTime) => {\n                const safeEndTime = timeToNumber(this.clock, endTime);\n                this.endSpan(span, safeEndTime);\n            }\n        };\n    }\n    validateSpanOptions(name, options, schema = coreSpanOptionSchema) {\n        let warnings = '';\n        const cleanOptions = {};\n        if (typeof name !== 'string') {\n            warnings += `\\n  - name should be a string, got ${typeof name}`;\n            name = String(name);\n        }\n        if (options !== undefined && !isObject(options)) {\n            warnings += '\\n  - options is not an object';\n        }\n        else {\n            const spanOptions = options || {};\n            for (const option of Object.keys(schema)) {\n                if (Object.prototype.hasOwnProperty.call(spanOptions, option) && spanOptions[option] !== undefined) {\n                    if (schema[option].validate(spanOptions[option])) {\n                        cleanOptions[option] = spanOptions[option];\n                    }\n                    else {\n                        warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof spanOptions[option]}`;\n                        cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                    }\n                }\n                else {\n                    cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                }\n            }\n        }\n        if (warnings.length > 0) {\n            this.logger.warn(`Invalid span options${warnings}`);\n        }\n        return { name, options: cleanOptions };\n    }\n}\n\nexport { DISCARD_END_TIME, SpanFactory };\n", "import { BatchProcessor } from './batch-processor.js';\nimport { validateConfig } from './config.js';\nimport { TracePayloadEncoder } from './delivery.js';\nimport ProbabilityFetcher from './probability-fetcher.js';\nimport ProbabilityManager from './probability-manager.js';\nimport { BufferingProcessor } from './processor.js';\nimport Sampler from './sampler.js';\nimport { DefaultSpanContextStorage } from './span-context.js';\nimport { SpanFactory } from './span-factory.js';\n\nfunction createClient(options) {\n    const bufferingProcessor = new BufferingProcessor();\n    let processor = bufferingProcessor;\n    const spanContextStorage = options.spanContextStorage || new DefaultSpanContextStorage(options.backgroundingListener);\n    let logger = options.schema.logger.defaultValue;\n    const sampler = new Sampler(1.0);\n    const spanFactory = new SpanFactory(processor, sampler, options.idGenerator, options.spanAttributesSource, options.clock, options.backgroundingListener, logger, spanContextStorage);\n    const plugins = options.plugins(spanFactory, spanContextStorage);\n    return Object.assign({ start: (config) => {\n            const configuration = validateConfig(config, options.schema);\n            const delivery = options.deliveryFactory(configuration.endpoint);\n            options.spanAttributesSource.configure(configuration);\n            ProbabilityManager.create(options.persistence, sampler, new ProbabilityFetcher(delivery, configuration.apiKey)).then((manager) => {\n                processor = new BatchProcessor(delivery, configuration, options.retryQueueFactory(delivery, configuration.retryQueueMaxSize), sampler, manager, new TracePayloadEncoder(options.clock, configuration, options.resourceAttributesSource));\n                // ensure all spans started before .start() are added to the batch\n                for (const span of bufferingProcessor.spans) {\n                    processor.add(span);\n                }\n                // register with the backgrounding listener - we do this in 'start' as\n                // there's nothing to do if we're backgrounded before start is called\n                // e.g. we can't trigger delivery until we have the apiKey and endpoint\n                // from configuration\n                options.backgroundingListener.onStateChange(state => {\n                    processor.flush();\n                });\n                logger = configuration.logger;\n                spanFactory.configure(processor, logger);\n            });\n            for (const plugin of configuration.plugins) {\n                plugins.push(plugin);\n            }\n            for (const plugin of plugins) {\n                plugin.configure(configuration, spanFactory);\n            }\n        }, startSpan: (name, spanOptions) => {\n            const cleanOptions = spanFactory.validateSpanOptions(name, spanOptions);\n            const span = spanFactory.startSpan(cleanOptions.name, cleanOptions.options);\n            span.setAttribute('bugsnag.span.category', 'custom');\n            return spanFactory.toPublicApi(span);\n        }, getPlugin: (Constructor) => {\n            for (const plugin of plugins) {\n                if (plugin instanceof Constructor) {\n                    return plugin;\n                }\n            }\n        }, get currentSpanContext() {\n            return spanContextStorage.current;\n        } }, (options.platformExtensions && options.platformExtensions(spanFactory, spanContextStorage)));\n}\nfunction createNoopClient() {\n    const noop = () => { };\n    return {\n        start: noop,\n        startSpan: () => ({ id: '', traceId: '', end: noop, isValid: () => false }),\n        currentSpanContext: undefined\n    };\n}\n\nexport { createClient, createNoopClient };\n", "import { isDeviceId, isPersistedProbability } from './validation.js';\n\nclass InMemoryPersistence {\n    constructor() {\n        this.persistedItems = new Map();\n    }\n    async load(key) {\n        return this.persistedItems.get(key);\n    }\n    async save(key, value) {\n        this.persistedItems.set(key, value);\n    }\n}\nfunction toPersistedPayload(key, raw) {\n    switch (key) {\n        case 'bugsnag-sampling-probability': {\n            const json = JSON.parse(raw);\n            return isPersistedProbability(json)\n                ? json\n                : undefined;\n        }\n        case 'bugsnag-anonymous-id':\n            return isDeviceId(raw)\n                ? raw\n                : undefined;\n    }\n}\n\nexport { InMemoryPersistence, toPersistedPayload };\n", "const msInDay = 24 * 60 * 60000;\nclass InMemoryQueue {\n    constructor(delivery, retryQueueMaxSize) {\n        this.delivery = delivery;\n        this.retryQueueMaxSize = retryQueueMaxSize;\n        this.requestQueue = Promise.resolve();\n        this.payloads = [];\n    }\n    add(payload, time) {\n        this.payloads.push({ payload, time });\n        let spanCount = this.payloads.reduce((count, { payload }) => count + countSpansInPayload(payload), 0);\n        while (spanCount > this.retryQueueMaxSize) {\n            const payload = this.payloads.shift();\n            if (!payload) {\n                break;\n            }\n            spanCount -= countSpansInPayload(payload.payload);\n        }\n    }\n    async flush() {\n        if (this.payloads.length === 0)\n            return;\n        const payloads = this.payloads;\n        this.payloads = [];\n        this.requestQueue = this.requestQueue.then(async () => {\n            for (const { payload, time } of payloads) {\n                // discard payloads at least 24 hours old\n                if (Date.now() >= time + msInDay)\n                    continue;\n                try {\n                    const { state } = await this.delivery.send(payload);\n                    switch (state) {\n                        case 'success':\n                        case 'failure-discard':\n                            break;\n                        case 'failure-retryable':\n                            this.add(payload, time);\n                            break;\n                        default:\n                            state;\n                    }\n                }\n                catch (err) { }\n            }\n        });\n        await this.requestQueue;\n    }\n}\nfunction countSpansInPayload(payload) {\n    let count = 0;\n    for (let i = 0; i < payload.body.resourceSpans.length; ++i) {\n        const scopeSpans = payload.body.resourceSpans[i].scopeSpans;\n        for (let j = 0; j < scopeSpans.length; ++j) {\n            count += scopeSpans[j].spans.length;\n        }\n    }\n    return count;\n}\n\nexport { InMemoryQueue };\n", "import { responseStateFromStatusCode } from '@bugsnag/core-performance';\n\nfunction samplingProbabilityFromHeaders(headers) {\n    const value = headers.get('Bugsnag-Sampling-Probability');\n    if (typeof value !== 'string') {\n        return undefined;\n    }\n    const asNumber = Number.parseFloat(value);\n    if (Number.isNaN(asNumber) || asNumber < 0 || asNumber > 1) {\n        return undefined;\n    }\n    return asNumber;\n}\nfunction createFetchDeliveryFactory(fetch, clock, backgroundingListener) {\n    // if a backgrounding listener is supplied, set fetch's 'keepalive' flag\n    // when the app is backgrounded/terminated so that we can flush the last batch\n    // this may be required on platforms such as browser where without 'keepalive'\n    // the request may be cancelled (or never start sending) when backgrounded\n    // we don't _always_ set the flag because it imposes a 64k payload limit\n    let keepalive = false;\n    if (backgroundingListener) {\n        backgroundingListener.onStateChange(state => {\n            keepalive = state === 'in-background';\n        });\n    }\n    return function fetchDeliveryFactory(endpoint) {\n        return {\n            async send(payload) {\n                const body = JSON.stringify(payload.body);\n                payload.headers['Bugsnag-Sent-At'] = clock.date().toISOString();\n                try {\n                    const response = await fetch(endpoint, {\n                        method: 'POST',\n                        keepalive,\n                        body,\n                        headers: payload.headers\n                    });\n                    return {\n                        state: responseStateFromStatusCode(response.status),\n                        samplingProbability: samplingProbabilityFromHeaders(response.headers)\n                    };\n                }\n                catch (err) {\n                    if (body.length > 10e5) {\n                        return { state: 'failure-discard' };\n                    }\n                    return { state: 'failure-retryable' };\n                }\n            }\n        };\n    };\n}\n\nexport { createFetchDeliveryFactory as default };\n", "function defaultNetworkRequestCallback(networkRequestInfo) {\n    return networkRequestInfo;\n}\nfunction isNetworkRequestCallback(value) {\n    return typeof value === 'function';\n}\n\nexport { defaultNetworkRequestCallback, isNetworkRequestCallback };\n", "class RequestTracker {\n    constructor() {\n        this.callbacks = [];\n    }\n    onStart(startCallback) {\n        this.callbacks.push(startCallback);\n    }\n    start(context) {\n        const results = [];\n        for (const startCallback of this.callbacks) {\n            const result = startCallback(context);\n            if (result)\n                results.push(result);\n        }\n        return {\n            onRequestEnd: (endContext) => {\n                for (const result of results) {\n                    if (result && result.onRequestEnd) {\n                        result.onRequestEnd(endContext);\n                    }\n                }\n            },\n            extraRequestHeaders: results.map((result) => {\n                if (result && result.extraRequestHeaders) {\n                    return result.extraRequestHeaders;\n                }\n                return undefined;\n            }).filter(isDefined)\n        };\n    }\n}\nfunction isDefined(argument) {\n    return argument !== undefined;\n}\n\nexport { RequestTracker };\n", "function getAbsoluteUrl(url, baseUrl) {\n    // if it looks like an absolute url do nothing\n    if (url.indexOf('https://') === 0 || url.indexOf('http://') === 0)\n        return url;\n    try {\n        const absoluteUrl = new URL(url, baseUrl).href;\n        // if a trailing slash has been added inadvertently remove it\n        if (!url.endsWith('/') && absoluteUrl.endsWith('/')) {\n            return absoluteUrl.slice(0, -1);\n        }\n        return absoluteUrl;\n    }\n    catch (_a) {\n        // not a valid URL for some reason - simply return it\n        return url;\n    }\n}\n\nexport { getAbsoluteUrl as default };\n", "import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createStartContext(startTime, input, init, baseUrl) {\n    const inputIsRequest = isRequest(input);\n    const url = inputIsRequest ? input.url : String(input);\n    const method = (!!init && init.method) || (inputIsRequest && input.method) || 'GET';\n    return { url: getAbsoluteUrl(url, baseUrl), method, startTime, type: 'fetch' };\n}\nfunction isRequest(input) {\n    return !!input && typeof input === 'object' && !(input instanceof URL);\n}\nfunction createFetchRequestTracker(global, clock) {\n    const requestTracker = new RequestTracker();\n    const originalFetch = global.fetch;\n    global.fetch = function fetch(input, init) {\n        const startContext = createStartContext(clock.now(), input, init, global.document && global.document.baseURI);\n        const { onRequestEnd, extraRequestHeaders } = requestTracker.start(startContext);\n        // Add the headers to the `init` received from the caller\n        const patchedInit = mergeRequestHeaders(init, extraRequestHeaders);\n        return originalFetch.call(this, input, patchedInit).then(response => {\n            onRequestEnd({ status: response.status, endTime: clock.now(), state: 'success' });\n            return response;\n        }).catch(error => {\n            onRequestEnd({ error, endTime: clock.now(), state: 'error' });\n            throw error;\n        });\n    };\n    return requestTracker;\n}\nfunction mergeRequestHeaders(init, extraRequestHeaders) {\n    if (!extraRequestHeaders)\n        return init;\n    const extraHeaders = {};\n    for (const h of extraRequestHeaders) {\n        for (const [name, value] of Object.entries(h)) {\n            extraHeaders[name] = value;\n        }\n    }\n    return Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, extraHeaders), init === null || init === void 0 ? void 0 : init.headers) });\n}\n\nexport { createFetchRequestTracker as default };\n", "import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createXmlHttpRequestTracker(xhr, clock, document) {\n    const requestTracker = new RequestTracker();\n    const trackedRequests = new WeakMap();\n    const requestHandlers = new WeakMap();\n    const originalOpen = xhr.prototype.open;\n    xhr.prototype.open = function open(method, url, ...rest) {\n        trackedRequests.set(this, { method, url: getAbsoluteUrl(String(url), document && document.baseURI) });\n        // @ts-expect-error rest\n        originalOpen.call(this, method, url, ...rest);\n    };\n    const originalSend = xhr.prototype.send;\n    xhr.prototype.send = function send(body) {\n        const requestData = trackedRequests.get(this);\n        if (requestData) {\n            // if there is an existing event listener this request instance is being reused,\n            // so we need to remove the listener from the previous send\n            const existingHandler = requestHandlers.get(this);\n            if (existingHandler)\n                this.removeEventListener('readystatechange', existingHandler);\n            const { onRequestEnd, extraRequestHeaders } = requestTracker.start({\n                type: 'xmlhttprequest',\n                method: requestData.method,\n                url: requestData.url,\n                startTime: clock.now()\n            });\n            if (extraRequestHeaders) {\n                for (const extraHeaders of extraRequestHeaders) {\n                    for (const [name, value] of Object.entries(extraHeaders)) {\n                        this.setRequestHeader(name, value);\n                    }\n                }\n            }\n            const onReadyStateChange = (evt) => {\n                if (this.readyState === xhr.DONE && onRequestEnd) {\n                    // If the status is 0 the request did not complete so report this as an error\n                    const endContext = this.status > 0\n                        ? { endTime: clock.now(), status: this.status, state: 'success' }\n                        : { endTime: clock.now(), state: 'error' };\n                    onRequestEnd(endContext);\n                }\n            };\n            this.addEventListener('readystatechange', onReadyStateChange);\n            requestHandlers.set(this, onReadyStateChange);\n        }\n        originalSend.call(this, body);\n    };\n    return requestTracker;\n}\n\nexport { createXmlHttpRequestTracker as default };\n", "import { isObject } from '@bugsnag/core-performance';\n\nconst defaultSendPageAttributes = {\n    referrer: true,\n    title: true,\n    url: true\n};\nfunction getPermittedAttributes(sendPageAttributes) {\n    return Object.assign(Object.assign({}, defaultSendPageAttributes), sendPageAttributes);\n}\nfunction isSendPageAttributes(obj) {\n    const allowedTypes = ['undefined', 'boolean'];\n    const keys = Object.keys(defaultSendPageAttributes);\n    return isObject(obj) && keys.every(key => allowedTypes.includes(typeof obj[key]));\n}\n\nexport { defaultSendPageAttributes, getPermittedAttributes, isSendPageAttributes };\n", "function shouldOmitSpan(startTime, endTime) {\n    return (startTime === undefined || endTime === undefined) ||\n        (startTime === 0 && endTime === 0);\n}\nconst instrumentPageLoadPhaseSpans = (spanFactory, performance, route, parentContext) => {\n    function createPageLoadPhaseSpan(phase, startTime, endTime) {\n        if (shouldOmitSpan(startTime, endTime))\n            return;\n        const span = spanFactory.startSpan(`[PageLoadPhase/${phase}]${route}`, {\n            startTime,\n            parentContext,\n            makeCurrentContext: false\n        });\n        span.setAttribute('bugsnag.span.category', 'page_load_phase');\n        span.setAttribute('bugsnag.phase', phase);\n        spanFactory.endSpan(span, endTime);\n    }\n    const entries = performance.getEntriesByType('navigation');\n    const entry = Array.isArray(entries) && entries[0];\n    if (entry) {\n        createPageLoadPhaseSpan('Unload', entry.unloadEventStart, entry.unloadEventEnd);\n        createPageLoadPhaseSpan('Redirect', entry.redirectStart, entry.redirectEnd);\n        createPageLoadPhaseSpan('LoadFromCache', entry.fetchStart, entry.domainLookupStart);\n        createPageLoadPhaseSpan('DNSLookup', entry.domainLookupStart, entry.domainLookupEnd);\n        // secureConectionStart will be 0 if no secure connection is used so use connectEnd in that case\n        const TCPHandshakeEnd = entry.secureConnectionStart || entry.connectEnd;\n        createPageLoadPhaseSpan('TCPHandshake', entry.connectStart, TCPHandshakeEnd);\n        createPageLoadPhaseSpan('TLS', entry.secureConnectionStart, entry.connectEnd);\n        createPageLoadPhaseSpan('HTTPRequest', entry.requestStart, entry.responseStart);\n        createPageLoadPhaseSpan('HTTPResponse', entry.responseStart, entry.responseEnd);\n        createPageLoadPhaseSpan('DomContentLoadedEvent', entry.domContentLoadedEventStart, entry.domContentLoadedEventEnd);\n        createPageLoadPhaseSpan('LoadEvent', entry.loadEventStart, entry.loadEventEnd);\n    }\n};\n\nexport { instrumentPageLoadPhaseSpans };\n", "import { getAbsoluteUrl } from '@bugsnag/request-tracker-performance';\n\nconst defaultRouteResolver = (url) => url.pathname || '/';\nconst createNoopRoutingProvider = () => {\n    return class NoopRoutingProvider {\n        constructor(resolveRoute = defaultRouteResolver) {\n            this.resolveRoute = resolveRoute;\n        }\n        listenForRouteChanges(startRouteChangeSpan) { }\n    };\n};\nconst createDefaultRoutingProvider = (onSettle, location) => {\n    return class DefaultRoutingProvider {\n        constructor(resolveRoute = defaultRouteResolver) {\n            this.resolveRoute = resolveRoute;\n        }\n        listenForRouteChanges(startRouteChangeSpan) {\n            addEventListener('popstate', (ev) => {\n                const url = new URL(location.href);\n                const span = startRouteChangeSpan(url, 'popstate');\n                onSettle((endTime) => {\n                    span.end(endTime);\n                });\n            });\n            const originalPushState = history.pushState;\n            history.pushState = function (...args) {\n                const url = args[2];\n                if (url) {\n                    const absoluteURL = new URL(getAbsoluteUrl(url.toString(), document.baseURI));\n                    const span = startRouteChangeSpan(absoluteURL, 'pushState');\n                    onSettle((endTime) => {\n                        span.end(endTime);\n                    });\n                }\n                originalPushState.apply(this, args);\n            };\n        }\n    };\n};\n\nexport { createDefaultRoutingProvider, createNoopRoutingProvider, defaultRouteResolver };\n", "import { getPermittedAttributes } from '../send-page-attributes.js';\nimport { instrumentPageLoadPhaseSpans } from './page-load-phase-spans.js';\nimport { defaultRouteResolver } from '../default-routing-provider.js';\n\nclass FullPageLoadPlugin {\n    constructor(document, location, spanFactory, webVitals, onSettle, backgroundingListener, performance) {\n        // if the page was backgrounded at any point in the loading process a page\n        // load span is invalidated as the browser will deprioritise the page\n        this.wasBackgrounded = false;\n        this.document = document;\n        this.location = location;\n        this.spanFactory = spanFactory;\n        this.webVitals = webVitals;\n        this.onSettle = onSettle;\n        this.performance = performance;\n        backgroundingListener.onStateChange(state => {\n            if (!this.wasBackgrounded && state === 'in-background') {\n                this.wasBackgrounded = true;\n            }\n        });\n    }\n    configure(configuration) {\n        // don't report a page load span if the option is turned off or the page was\n        // backgrounded at any point in the loading process\n        if (!configuration.autoInstrumentFullPageLoads || this.wasBackgrounded) {\n            return;\n        }\n        const span = this.spanFactory.startSpan('[FullPageLoad]', { startTime: 0, parentContext: null });\n        const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes);\n        const url = new URL(this.location.href);\n        this.onSettle((endTime) => {\n            if (this.wasBackgrounded)\n                return;\n            // ensure there's always a route on this span by falling back to the\n            // default route resolver - the pipeline will ignore page load spans that\n            // don't have a route\n            const route = configuration.routingProvider.resolveRoute(url) || defaultRouteResolver(url);\n            span.name += route;\n            instrumentPageLoadPhaseSpans(this.spanFactory, this.performance, route, span);\n            // Browser attributes\n            span.setAttribute('bugsnag.span.category', 'full_page_load');\n            span.setAttribute('bugsnag.browser.page.route', route);\n            if (permittedAttributes.referrer)\n                span.setAttribute('bugsnag.browser.page.referrer', this.document.referrer);\n            if (permittedAttributes.title)\n                span.setAttribute('bugsnag.browser.page.title', this.document.title);\n            if (permittedAttributes.url)\n                span.setAttribute('bugsnag.browser.page.url', url.toString());\n            this.webVitals.attachTo(span);\n            this.spanFactory.endSpan(span, endTime);\n        });\n    }\n}\n\nexport { FullPageLoadPlugin };\n", "import { defaultNetworkRequestCallback } from '@bugsnag/request-tracker-performance';\n\nconst permittedPrefixes = ['http://', 'https://', '/', './', '../'];\nclass NetworkRequestPlugin {\n    constructor(spanFactory, spanContextStorage, fetchTracker, xhrTracker) {\n        this.spanFactory = spanFactory;\n        this.spanContextStorage = spanContextStorage;\n        this.fetchTracker = fetchTracker;\n        this.xhrTracker = xhrTracker;\n        this.configEndpoint = '';\n        this.networkRequestCallback = defaultNetworkRequestCallback;\n        this.logger = { debug: console.debug, warn: console.warn, info: console.info, error: console.error };\n        this.trackRequest = (startContext) => {\n            if (!this.shouldTrackRequest(startContext))\n                return;\n            const shouldPropagateTraceContextByDefault = false;\n            const defaultRequestInfo = {\n                url: startContext.url,\n                type: startContext.type,\n                propagateTraceContext: shouldPropagateTraceContextByDefault\n            };\n            const networkRequestInfo = this.networkRequestCallback(defaultRequestInfo);\n            // returning null neither creates a span nor propagates trace context\n            if (!networkRequestInfo) {\n                return {\n                    onRequestEnd: undefined,\n                    extraRequestHeaders: undefined\n                };\n            }\n            if (networkRequestInfo.propagateTraceContext === undefined) {\n                networkRequestInfo.propagateTraceContext = shouldPropagateTraceContextByDefault;\n            }\n            // a span is not created if url is null\n            if (!networkRequestInfo.url) {\n                return {\n                    onRequestEnd: undefined,\n                    // propagate trace context if requested using span context\n                    extraRequestHeaders: networkRequestInfo.propagateTraceContext ? this.getExtraRequestHeaders() : undefined\n                };\n            }\n            // otherwise, create a span and propagate trace context if requested\n            if (typeof networkRequestInfo.url !== 'string') {\n                this.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`);\n                return;\n            }\n            const span = this.spanFactory.startSpan(`[HTTP]/${startContext.method.toUpperCase()}`, { startTime: startContext.startTime, makeCurrentContext: false });\n            span.setAttribute('bugsnag.span.category', 'network');\n            span.setAttribute('http.method', startContext.method);\n            span.setAttribute('http.url', networkRequestInfo.url);\n            return {\n                onRequestEnd: (endContext) => {\n                    if (endContext.state === 'success') {\n                        span.setAttribute('http.status_code', endContext.status);\n                        this.spanFactory.endSpan(span, endContext.endTime);\n                    }\n                },\n                // propagate trace context using network span\n                extraRequestHeaders: networkRequestInfo.propagateTraceContext\n                    ? this.getExtraRequestHeaders(span)\n                    : undefined\n            };\n        };\n    }\n    configure(configuration) {\n        this.logger = configuration.logger;\n        if (configuration.autoInstrumentNetworkRequests) {\n            this.configEndpoint = configuration.endpoint;\n            this.xhrTracker.onStart(this.trackRequest);\n            this.fetchTracker.onStart(this.trackRequest);\n            this.networkRequestCallback = configuration.networkRequestCallback;\n        }\n    }\n    shouldTrackRequest(startContext) {\n        return startContext.url !== this.configEndpoint && permittedPrefixes.some((prefix) => startContext.url.startsWith(prefix));\n    }\n    getExtraRequestHeaders(span) {\n        const extraRequestHeaders = {};\n        if (span) {\n            const traceId = span.traceId;\n            const parentSpanId = span.id;\n            const sampled = this.spanFactory.sampler.shouldSample(span.samplingRate);\n            extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled);\n        }\n        else if (this.spanContextStorage.current) {\n            const currentSpanContext = this.spanContextStorage.current;\n            const traceId = currentSpanContext.traceId;\n            const parentSpanId = currentSpanContext.id;\n            const sampled = this.spanFactory.sampler.shouldSample(currentSpanContext.samplingRate);\n            extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled);\n        }\n        return extraRequestHeaders;\n    }\n}\nfunction buildTraceparentHeader(traceId, parentSpanId, sampled) {\n    return `00-${traceId}-${parentSpanId}-${sampled ? '01' : '00'}`;\n}\n\nexport { NetworkRequestPlugin };\n", "function getHttpVersion(protocol) {\n    switch (protocol) {\n        case '':\n            return undefined;\n        case 'http/1.0':\n            return '1.0';\n        case 'http/1.1':\n            return '1.1';\n        case 'h2':\n        case 'h2c':\n            return '2.0';\n        case 'h3':\n            return '3.0';\n        case 'spdy/1':\n        case 'spdy/2':\n        case 'spdy/3':\n            return 'SPDY';\n        default:\n            return protocol;\n    }\n}\nfunction resourceLoadSupported(PerformanceObserverClass) {\n    return PerformanceObserverClass &&\n        Array.isArray(PerformanceObserverClass.supportedEntryTypes) &&\n        PerformanceObserverClass.supportedEntryTypes.includes('resource');\n}\nclass ResourceLoadPlugin {\n    constructor(spanFactory, spanContextStorage, PerformanceObserverClass) {\n        this.spanFactory = spanFactory;\n        this.spanContextStorage = spanContextStorage;\n        this.PerformanceObserverClass = PerformanceObserverClass;\n    }\n    configure(configuration) {\n        if (!resourceLoadSupported(this.PerformanceObserverClass))\n            return;\n        const observer = new this.PerformanceObserverClass((list) => {\n            const entries = list.getEntries();\n            for (const entry of entries) {\n                if (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') {\n                    continue;\n                }\n                const parentContext = this.spanContextStorage.first;\n                if (parentContext) {\n                    const networkRequestInfo = configuration.networkRequestCallback({ url: entry.name, type: entry.initiatorType });\n                    if (!networkRequestInfo)\n                        return;\n                    if (typeof networkRequestInfo.url !== 'string') {\n                        configuration.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`);\n                        return;\n                    }\n                    let name = '';\n                    try {\n                        const url = new URL(networkRequestInfo.url);\n                        url.search = '';\n                        name = url.href;\n                    }\n                    catch (err) {\n                        configuration.logger.warn(`Unable to parse URL returned from networkRequestCallback: ${networkRequestInfo.url}`);\n                        return;\n                    }\n                    const span = this.spanFactory.startSpan(`[ResourceLoad]${name}`, {\n                        parentContext,\n                        startTime: entry.startTime,\n                        makeCurrentContext: false\n                    });\n                    span.setAttribute('bugsnag.span.category', 'resource_load');\n                    span.setAttribute('http.url', networkRequestInfo.url);\n                    const httpFlavor = getHttpVersion(entry.nextHopProtocol);\n                    if (httpFlavor) {\n                        span.setAttribute('http.flavor', httpFlavor);\n                    }\n                    if (entry.encodedBodySize && entry.decodedBodySize) {\n                        span.setAttribute('http.response_content_length', entry.encodedBodySize);\n                        span.setAttribute('http.response_content_length_uncompressed', entry.decodedBodySize);\n                    }\n                    if (entry.responseStatus) {\n                        span.setAttribute('http.status_code', entry.responseStatus);\n                    }\n                    this.spanFactory.endSpan(span, entry.responseEnd);\n                }\n            }\n        });\n        try {\n            observer.observe({ type: 'resource', buffered: true });\n        }\n        catch (err) {\n            configuration.logger.warn('Unable to get previous resource loads as buffered observer not supported, only showing resource loads from this point on');\n            observer.observe({ entryTypes: ['resource'] });\n        }\n    }\n}\n\nexport { ResourceLoadPlugin, getHttpVersion };\n", "import { isObject, isString, coreSpanOptionSchema } from '@bugsnag/core-performance';\nimport { getPermittedAttributes } from '../send-page-attributes.js';\nimport { defaultRouteResolver } from '../default-routing-provider.js';\n\n// exclude isFirstClass from the route change option schema\nconst { startTime, parentContext, makeCurrentContext } = coreSpanOptionSchema;\nconst routeChangeSpanOptionSchema = {\n    startTime,\n    parentContext,\n    makeCurrentContext,\n    trigger: {\n        getDefaultValue: (value) => String(value),\n        message: 'should be a string',\n        validate: isString\n    }\n};\nclass RouteChangePlugin {\n    constructor(spanFactory, location, document) {\n        this.spanFactory = spanFactory;\n        this.location = location;\n        this.document = document;\n    }\n    configure(configuration) {\n        if (!configuration.autoInstrumentRouteChanges)\n            return;\n        const previousUrl = new URL(this.location.href);\n        let previousRoute = configuration.routingProvider.resolveRoute(previousUrl) || defaultRouteResolver(previousUrl);\n        const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes);\n        configuration.routingProvider.listenForRouteChanges((url, trigger, options) => {\n            let absoluteUrl;\n            if (url instanceof URL) {\n                absoluteUrl = url;\n            }\n            else {\n                try {\n                    const stringUrl = String(url);\n                    absoluteUrl = new URL(stringUrl);\n                }\n                catch (err) {\n                    configuration.logger.warn('Invalid span options\\n  - url should be a URL');\n                    return {\n                        id: '',\n                        traceId: '',\n                        samplingRate: 0,\n                        isValid: () => false,\n                        end: () => { }\n                    };\n                }\n            }\n            // create internal options for validation\n            const routeChangeSpanOptions = Object.assign(Object.assign({}, options), { trigger });\n            const cleanOptions = this.spanFactory.validateSpanOptions('[RouteChange]', routeChangeSpanOptions, routeChangeSpanOptionSchema);\n            const route = configuration.routingProvider.resolveRoute(absoluteUrl) || defaultRouteResolver(absoluteUrl);\n            // update the span name using the validated route\n            cleanOptions.name += route;\n            const span = this.spanFactory.startSpan(cleanOptions.name, cleanOptions.options);\n            span.setAttribute('bugsnag.span.category', 'route_change');\n            span.setAttribute('bugsnag.browser.page.route', route);\n            span.setAttribute('bugsnag.browser.page.previous_route', previousRoute);\n            span.setAttribute('bugsnag.browser.page.route_change.trigger', cleanOptions.options.trigger);\n            if (permittedAttributes.url)\n                span.setAttribute('bugsnag.browser.page.url', url.toString());\n            previousRoute = route;\n            return {\n                id: span.id,\n                traceId: span.traceId,\n                isValid: span.isValid,\n                samplingRate: span.samplingRate,\n                end: (endTimeOrOptions) => {\n                    const options = isObject(endTimeOrOptions) ? endTimeOrOptions : { endTime: endTimeOrOptions };\n                    if (permittedAttributes.title) {\n                        span.setAttribute('bugsnag.browser.page.title', this.document.title);\n                    }\n                    if (options.url) {\n                        const urlObject = ensureUrl(options.url); // convert strings to URL if necessary\n                        const route = configuration.routingProvider.resolveRoute(urlObject) || defaultRouteResolver(urlObject);\n                        span.name = `[RouteChange]${route}`;\n                        span.setAttribute('bugsnag.browser.page.route', route);\n                        previousRoute = route;\n                        // update the URL attribute as well\n                        if (permittedAttributes.url) {\n                            span.setAttribute('bugsnag.browser.page.url', urlObject.toString());\n                        }\n                    }\n                    this.spanFactory.toPublicApi(span).end(options.endTime);\n                }\n            };\n        });\n    }\n}\nfunction ensureUrl(url) {\n    if (typeof url === 'string') {\n        return new URL(url);\n    }\n    return url;\n}\n\nexport { RouteChangePlugin };\n", "function createBrowserBackgroundingListener(window) {\n    const callbacks = [];\n    let state = window.document.visibilityState === 'hidden'\n        ? 'in-background'\n        : 'in-foreground';\n    const backgroundingListener = {\n        onStateChange(backgroundingListenerCallback) {\n            callbacks.push(backgroundingListenerCallback);\n            // trigger the callback immediately if the document is already 'hidden'\n            if (state === 'in-background') {\n                backgroundingListenerCallback(state);\n            }\n        }\n    };\n    const backgroundStateChanged = (newState) => {\n        if (state === newState)\n            return;\n        state = newState;\n        for (const callback of callbacks) {\n            callback(state);\n        }\n    };\n    window.document.addEventListener('visibilitychange', function () {\n        const newState = window.document.visibilityState === 'hidden'\n            ? 'in-background'\n            : 'in-foreground';\n        backgroundStateChanged(newState);\n    });\n    // some browsers don't fire the visibilitychange event when the page is suspended,\n    // so we also listen for pagehide and pageshow events\n    window.addEventListener('pagehide', function () {\n        backgroundStateChanged('in-background');\n    });\n    window.addEventListener('pageshow', function () {\n        backgroundStateChanged('in-foreground');\n    });\n    return backgroundingListener;\n}\n\nexport { createBrowserBackgroundingListener as default };\n", "import { millisecondsToNanoseconds } from '@bugsnag/core-performance';\n\n// maximum allowed clock divergence in milliseconds\nconst MAX_CLOCK_DRIFT_MS = 300000;\nfunction recalculateTimeOrigin(timeOrigin, performance) {\n    // if the machine has been sleeping the monatomic clock used by performance.now() may have been paused,\n    // so we need to check if this has drifted significantly from Date.now()\n    // if the drift is > 5 minutes re-set the clock's origin to bring it back in line with Date.now()\n    if (Math.abs(Date.now() - (timeOrigin + performance.now())) > MAX_CLOCK_DRIFT_MS) {\n        return Date.now() - performance.now();\n    }\n    return timeOrigin;\n}\nfunction createClock(performance, backgroundingListener) {\n    const initialTimeOrigin = performance.timeOrigin === undefined\n        ? performance.timing.navigationStart\n        : performance.timeOrigin;\n    // the performance clock could be shared between different tabs running in the same process\n    // so may already have diverged - for this reason we calculate a time origin when we first create the clock\n    // as well as when the app returns to the foreground\n    let calculatedTimeOrigin = recalculateTimeOrigin(initialTimeOrigin, performance);\n    backgroundingListener.onStateChange(state => {\n        if (state === 'in-foreground') {\n            calculatedTimeOrigin = recalculateTimeOrigin(calculatedTimeOrigin, performance);\n        }\n    });\n    return {\n        now: () => performance.now(),\n        date: () => new Date(calculatedTimeOrigin + performance.now()),\n        convert: (date) => date.getTime() - calculatedTimeOrigin,\n        // convert milliseconds since timeOrigin to full timestamp\n        toUnixTimestampNanoseconds: (time) => millisecondsToNanoseconds(calculatedTimeOrigin + time).toString()\n    };\n}\n\nexport { createClock as default };\n", "import { isObject } from '@bugsnag/core-performance';\n\nconst isRoutingProvider = (value) => isObject(value) &&\n    typeof value.resolveRoute === 'function' &&\n    typeof value.listenForRouteChanges === 'function';\n\nexport { isRoutingProvider };\n", "import { schema, isBoolean, isStringOrRegExpArray } from '@bugsnag/core-performance';\nimport { defaultNetworkRequestCallback, isNetworkRequestCallback } from '@bugsnag/request-tracker-performance';\nimport { isRoutingProvider } from './routing-provider.js';\nimport { defaultSendPageAttributes, isSendPageAttributes } from './send-page-attributes.js';\n\nfunction createSchema(hostname, defaultRoutingProvider) {\n    return Object.assign(Object.assign({}, schema), { releaseStage: Object.assign(Object.assign({}, schema.releaseStage), { defaultValue: hostname === 'localhost' ? 'development' : 'production' }), autoInstrumentFullPageLoads: {\n            defaultValue: true,\n            message: 'should be true|false',\n            validate: isBoolean\n        }, autoInstrumentNetworkRequests: {\n            defaultValue: true,\n            message: 'should be true|false',\n            validate: isBoolean\n        }, autoInstrumentRouteChanges: {\n            defaultValue: true,\n            message: 'should be true|false',\n            validate: isBoolean\n        }, generateAnonymousId: {\n            defaultValue: true,\n            message: 'should be true|false',\n            validate: isBoolean\n        }, routingProvider: {\n            defaultValue: defaultRoutingProvider,\n            message: 'should be a routing provider',\n            validate: isRoutingProvider\n        }, settleIgnoreUrls: {\n            defaultValue: [],\n            message: 'should be an array of string|RegExp',\n            validate: isStringOrRegExpArray\n        }, networkRequestCallback: {\n            defaultValue: defaultNetworkRequestCallback,\n            message: 'should be a function',\n            validate: isNetworkRequestCallback\n        }, sendPageAttributes: {\n            defaultValue: defaultSendPageAttributes,\n            message: 'should be an object',\n            validate: isSendPageAttributes\n        } });\n}\n\nexport { createSchema };\n", "function toHex(value) {\n    const hex = value.toString(16);\n    // pad hex with a leading 0 if it's not already 2 characters\n    if (hex.length === 1) {\n        return '0' + hex;\n    }\n    return hex;\n}\nconst idGenerator = {\n    generate(bits) {\n        const bytes = new Uint8Array(bits / 8);\n        // TODO: do we just read window here?\n        //       how can we pass this in given it needs to be valid before 'start' is called?\n        const randomValues = window.crypto.getRandomValues(bytes);\n        return Array.from(randomValues, toHex).join('');\n    }\n};\n\nexport { idGenerator as default };\n", "class Settler {\n    constructor(clock) {\n        this.settled = false;\n        this.callbacks = new Set();\n        this.clock = clock;\n    }\n    subscribe(callback) {\n        this.callbacks.add(callback);\n        // if we're already settled, call the callback immediately\n        if (this.isSettled()) {\n            callback(this.clock.now());\n        }\n    }\n    unsubscribe(callback) {\n        this.callbacks.delete(callback);\n    }\n    isSettled() {\n        return this.settled;\n    }\n    settle(settledTime) {\n        this.settled = true;\n        for (const callback of this.callbacks) {\n            callback(settledTime);\n        }\n    }\n}\n\nexport { Settler };\n", "import { Settler } from './settler.js';\n\nclass DomMutationSettler extends Settler {\n    constructor(clock, target) {\n        super(clock);\n        this.timeout = undefined;\n        const observer = new MutationObserver(() => { this.restart(); });\n        observer.observe(target, {\n            subtree: true,\n            childList: true,\n            characterData: true\n            // we don't track attribute changes as they may or may not be user visible\n            // so we assume they won't affect the page appearing settled to the user\n        });\n        this.restart();\n    }\n    restart() {\n        clearTimeout(this.timeout);\n        this.settled = false;\n        // we wait 100ms to ensure that DOM mutations have actually stopped but\n        // don't want the settled time to reflect that wait, so we record the time\n        // here and use that when settling\n        const settledTime = this.clock.now();\n        this.timeout = setTimeout(() => { this.settle(settledTime); }, 100);\n    }\n}\n\nexport { DomMutationSettler as default };\n", "import { Settler } from './settler.js';\n\n// check if a PerformanceEntry is a PerformanceNavigationTiming\nfunction isPerformanceNavigationTiming(entry) {\n    return !!entry && entry.entryType === 'navigation';\n}\nclass LoadEventEndSettler extends Settler {\n    constructor(clock, addEventListener, performance, document) {\n        super(clock);\n        // we delay settling by a macrotask so that the load event has ended\n        // see: https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context/25933985#25933985\n        //      https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n        if (document.readyState === 'complete') {\n            setTimeout(() => { this.settleUsingPerformance(performance); }, 0);\n        }\n        else {\n            addEventListener('load', () => {\n                setTimeout(() => { this.settleUsingPerformance(performance); }, 0);\n            });\n        }\n    }\n    settleUsingPerformance(performance) {\n        const now = this.clock.now();\n        // there's only ever one navigation entry\n        // PLAT-10204 Prevent snags occuring due to DOM scanning bots like BuiltWith https://builtwith.com/biup\n        const entry = typeof performance.getEntriesByType === 'function' ? performance.getEntriesByType('navigation')[0] : undefined;\n        let settledTime = 0;\n        if (isPerformanceNavigationTiming(entry)) {\n            settledTime = entry.loadEventEnd;\n        }\n        else if (performance.timing) {\n            settledTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n        }\n        // if the settled time is obviously wrong then use the current time instead\n        // this won't be a perfectly accurate value, but it should be close enough\n        // for this purpose\n        if (settledTime <= 0 || settledTime > now) {\n            settledTime = now;\n        }\n        this.settle(settledTime);\n    }\n}\n\nexport { LoadEventEndSettler as default };\n", "import { Settler } from './settler.js';\n\nclass RequestSettler extends Settler {\n    constructor(clock, requestTracker) {\n        super(clock);\n        this.timeout = undefined;\n        this.urlsToIgnore = [];\n        this.outstandingRequests = 0;\n        // unlike most other settlers we start settled as it's possible to not make\n        // any requests at all\n        // TODO: we actually should only be settled if there are no outstanding\n        //       requests when constructed\n        this.settled = true;\n        requestTracker.onStart(this.onRequestStart.bind(this));\n    }\n    setUrlsToIgnore(urlsToIgnore) {\n        this.urlsToIgnore = urlsToIgnore;\n    }\n    onRequestStart(startContext) {\n        // if this is an excluded URL, ignore this request\n        if (this.shouldIgnoreUrl(startContext.url))\n            return;\n        clearTimeout(this.timeout);\n        this.settled = false;\n        ++this.outstandingRequests;\n        return {\n            onRequestEnd: (endContext) => {\n                if (--this.outstandingRequests === 0) {\n                    // we wait 100ms to ensure that requests have actually stopped but don't\n                    // want the settled time to reflect that wait, so we record the time\n                    // here and use that when settling\n                    const settledTime = this.clock.now();\n                    this.timeout = setTimeout(() => { this.settle(settledTime); }, 100);\n                }\n            }\n        };\n    }\n    shouldIgnoreUrl(url) {\n        return this.urlsToIgnore.some(regexp => regexp.test(url));\n    }\n}\n\nexport { RequestSettler as default };\n", "import { Settler } from './settler.js';\n\n/**\n * SettlerAggregate is a Settler that is settled when ALL Settlers it is\n * constructed with are settled themselves\n */\nclass SettlerAggregate extends Settler {\n    constructor(clock, settlers) {\n        super(clock);\n        this.settlers = settlers;\n        for (const settler of settlers) {\n            settler.subscribe((settledTime) => {\n                // we need to check if all of the settlers are settled here as a\n                // previously settled settler could have unsettled in the meantime\n                if (this.settlersAreSettled()) {\n                    this.settle(settledTime);\n                }\n                else {\n                    this.settled = false;\n                }\n            });\n        }\n    }\n    isSettled() {\n        // ensure all child settlers are settled as well; it's possible for all of\n        // them to have settled previously only for one to unsettle\n        return super.isSettled() && this.settlersAreSettled();\n    }\n    settlersAreSettled() {\n        for (const settler of this.settlers) {\n            if (!settler.isSettled()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport { SettlerAggregate as default };\n", "import DomMutationSettler from './dom-mutation-settler.js';\nimport LoadEventEndSettler from './load-event-end-settler.js';\nimport RequestSettler from './request-settler.js';\nimport SettlerAggregate from './settler-aggregate.js';\n\nconst TIMEOUT_MILLISECONDS = 60 * 1000;\nfunction createNoopOnSettle() {\n    const noop = () => { };\n    noop.configure = () => { };\n    return noop;\n}\nfunction createOnSettle(clock, window, fetchRequestTracker, xhrRequestTracker, performance) {\n    const domMutationSettler = new DomMutationSettler(clock, window.document);\n    const fetchRequestSettler = new RequestSettler(clock, fetchRequestTracker);\n    const xhrRequestSettler = new RequestSettler(clock, xhrRequestTracker);\n    const loadEventEndSettler = new LoadEventEndSettler(clock, window.addEventListener, performance, window.document);\n    const settler = new SettlerAggregate(clock, [\n        domMutationSettler,\n        loadEventEndSettler,\n        fetchRequestSettler,\n        xhrRequestSettler\n    ]);\n    function onSettlePlugin(callback) {\n        const onSettle = (settledTime) => {\n            clearTimeout(timeout);\n            // unsubscribe from the settler so we don't call the callback more than\n            // once\n            settler.unsubscribe(onSettle);\n            callback(settledTime);\n        };\n        const timeout = setTimeout(() => {\n            const settledTime = clock.now();\n            settler.unsubscribe(onSettle);\n            callback(settledTime);\n        }, TIMEOUT_MILLISECONDS);\n        // if we're already settled apply a 100ms \"cooldown\" period in case we\n        // unsettle immediately after this call\n        // if we're not settled then this cooldown is irrelevant - we can just\n        // subscribe to the settler to be notified of when the page settles\n        const cooldown = settler.isSettled() ? 100 : 0;\n        const settledTime = clock.now();\n        setTimeout(() => {\n            if (settler.isSettled()) {\n                // if we're still settled call the callback via \"onSettle\"\n                onSettle(settledTime);\n            }\n            else {\n                // otherwise wait for the page to settle\n                settler.subscribe(onSettle);\n            }\n        }, cooldown);\n    }\n    onSettlePlugin.configure = function (configuration) {\n        const settleIgnoreUrls = configuration.settleIgnoreUrls.map((url) => typeof url === 'string' ? RegExp(url) : url).concat(RegExp(configuration.endpoint));\n        fetchRequestSettler.setUrlsToIgnore(settleIgnoreUrls);\n        xhrRequestSettler.setUrlsToIgnore(settleIgnoreUrls);\n    };\n    return onSettlePlugin;\n}\n\nexport { createNoopOnSettle, createOnSettle as default };\n", "import { InMemoryPersistence, toPersistedPayload } from '@bugsnag/core-performance';\n\nfunction makeBrowserPersistence(window) {\n    // accessing localStorage can throw on some browsers, so we have to catch\n    // these errors and provide a fallback\n    try {\n        if (window.localStorage) {\n            return new BrowserPersistence(window.localStorage);\n        }\n    }\n    catch (_a) { }\n    // store items in memory if localStorage isn't available\n    return new InMemoryPersistence();\n}\nfunction toString(key, value) {\n    switch (key) {\n        case 'bugsnag-sampling-probability':\n            return JSON.stringify(value);\n        case 'bugsnag-anonymous-id':\n            return value;\n        default:\n            return key;\n    }\n}\nclass BrowserPersistence {\n    constructor(localStorage) {\n        this.storage = localStorage;\n    }\n    async load(key) {\n        try {\n            const raw = this.storage.getItem(key);\n            if (raw) {\n                return toPersistedPayload(key, raw);\n            }\n        }\n        catch (_a) { }\n    }\n    async save(key, value) {\n        try {\n            this.storage.setItem(key, toString(key, value));\n        }\n        catch (_a) { }\n    }\n}\n\nexport { makeBrowserPersistence as default };\n", "import cuid from '@bugsnag/cuid';\nimport { ResourceAttributes } from '@bugsnag/core-performance';\n\nfunction createResourceAttributesSource(navigator, persistence) {\n    let getDeviceId;\n    let deviceId;\n    return function resourceAttributesSource(config) {\n        const attributes = new ResourceAttributes(config.releaseStage, config.appVersion, 'bugsnag.performance.browser', '2.4.0');\n        attributes.set('browser.user_agent', navigator.userAgent);\n        // chromium only\n        if (navigator.userAgentData) {\n            attributes.set('browser.platform', navigator.userAgentData.platform);\n            attributes.set('browser.mobile', navigator.userAgentData.mobile);\n        }\n        if (config.generateAnonymousId) {\n            // ensure we only load/generate the anonymous ID once no matter how many\n            // times we're called, otherwise we could generate different IDs on\n            // different calls as cuids are partly time based\n            if (!getDeviceId) {\n                getDeviceId = persistence.load('bugsnag-anonymous-id')\n                    .then(maybeAnonymousId => {\n                    // use the persisted value or generate a new ID\n                    const anonymousId = maybeAnonymousId || cuid();\n                    // if there was no persisted value, save the newly generated ID\n                    if (!maybeAnonymousId) {\n                        persistence.save('bugsnag-anonymous-id', anonymousId);\n                    }\n                    // store the device ID so we can set it synchronously in future\n                    deviceId = anonymousId;\n                    return deviceId;\n                });\n            }\n            if (deviceId) {\n                // set device ID synchronously if it's already available\n                attributes.set('device.id', deviceId);\n            }\n            else {\n                // otherwise add it when the promise resolves\n                return getDeviceId\n                    .then(deviceId => {\n                    attributes.set('device.id', deviceId);\n                    return attributes;\n                });\n            }\n        }\n        return Promise.resolve(attributes);\n    };\n}\n\nexport { createResourceAttributesSource as default };\n", "const createSpanAttributesSource = (document) => {\n    const defaultAttributes = {\n        url: {\n            name: 'bugsnag.browser.page.url',\n            getValue: () => document.location.href,\n            permitted: false\n        },\n        title: {\n            name: 'bugsnag.browser.page.title',\n            getValue: () => document.title,\n            permitted: false\n        }\n    };\n    return {\n        configure(configuration) {\n            defaultAttributes.title.permitted = configuration.sendPageAttributes.title || false;\n            defaultAttributes.url.permitted = configuration.sendPageAttributes.url || false;\n        },\n        requestAttributes(span) {\n            for (const attribute of Object.values(defaultAttributes)) {\n                if (attribute.permitted) {\n                    span.setAttribute(attribute.name, attribute.getValue());\n                }\n            }\n        }\n    };\n};\n\nexport { createSpanAttributesSource, createSpanAttributesSource as default };\n", "class WebVitals {\n    constructor(performance, clock, PerformanceObserverClass) {\n        this.performance = performance;\n        this.clock = clock;\n        this.observers = [];\n        if (PerformanceObserverClass && Array.isArray(PerformanceObserverClass.supportedEntryTypes)) {\n            const supportedEntryTypes = PerformanceObserverClass.supportedEntryTypes;\n            if (supportedEntryTypes.includes('largest-contentful-paint')) {\n                this.observeLargestContentfulPaint(PerformanceObserverClass);\n            }\n            if (supportedEntryTypes.includes('layout-shift')) {\n                this.observeLayoutShift(PerformanceObserverClass);\n            }\n        }\n    }\n    attachTo(span) {\n        const firstContentfulPaint = this.firstContentfulPaint();\n        if (firstContentfulPaint) {\n            span.addEvent('fcp', firstContentfulPaint);\n        }\n        const timeToFirstByte = this.timeToFirstByte();\n        if (timeToFirstByte) {\n            span.addEvent('ttfb', timeToFirstByte);\n        }\n        const firstInputDelay = this.firstInputDelay();\n        if (firstInputDelay) {\n            span.addEvent('fid_start', firstInputDelay.start);\n            span.addEvent('fid_end', firstInputDelay.end);\n        }\n        if (this.cumulativeLayoutShift) {\n            span.setAttribute('bugsnag.metrics.cls', this.cumulativeLayoutShift);\n        }\n        if (this.largestContentfulPaint) {\n            span.addEvent('lcp', this.largestContentfulPaint);\n        }\n        // as there is only 1 page load span, we don't need to keep observing\n        // performance events, so can disconnect from any observers we've registered\n        for (const observer of this.observers) {\n            observer.disconnect();\n        }\n    }\n    firstContentfulPaint() {\n        const entries = this.performance.getEntriesByName('first-contentful-paint', 'paint');\n        const entry = Array.isArray(entries) && entries[0];\n        if (entry) {\n            return entry.startTime;\n        }\n    }\n    timeToFirstByte() {\n        const entries = this.performance.getEntriesByType('navigation');\n        const entry = Array.isArray(entries) && entries[0];\n        let responseStart;\n        if (entry) {\n            responseStart = entry.responseStart;\n        }\n        else {\n            responseStart = this.performance.timing.responseStart - this.performance.timing.navigationStart;\n        }\n        // only use responseStart if it's valid (between 0 and the current time)\n        // any other value cannot be valid because it would mean the response\n        // started immediately or hasn't happened yet!\n        if (responseStart > 0 && responseStart <= this.clock.now()) {\n            return responseStart;\n        }\n    }\n    firstInputDelay() {\n        const entries = this.performance.getEntriesByType('first-input');\n        const entry = Array.isArray(entries) && entries[0];\n        if (entry) {\n            return {\n                start: entry.startTime,\n                end: entry.processingStart\n            };\n        }\n    }\n    observeLargestContentfulPaint(PerformanceObserverClass) {\n        const observer = new PerformanceObserverClass((list) => {\n            const entries = list.getEntries();\n            if (entries.length > 0) {\n                // Use the latest LCP candidate\n                this.largestContentfulPaint = entries[entries.length - 1].startTime;\n            }\n        });\n        observer.observe({ type: 'largest-contentful-paint', buffered: true });\n        this.observers.push(observer);\n    }\n    observeLayoutShift(PerformanceObserverClass) {\n        let session;\n        const observer = new PerformanceObserverClass((list) => {\n            for (const entry of list.getEntries()) {\n                // ignore entries with recent input as it's likely the layout shifted due\n                // to user input and this metric only cares about unexpected layout\n                // shifts\n                if (entry.hadRecentInput) {\n                    continue;\n                }\n                // include this entry in the current session if we have a current session\n                // and this entry fits into the session window (it occurred less than 1\n                // second after the previous entry and the session duration is less than\n                // 5 seconds), otherwise start a new session\n                if (session &&\n                    entry.startTime - session.previousStartTime < 1000 &&\n                    entry.startTime - session.firstStartTime < 5000) {\n                    session.value += entry.value;\n                    session.previousStartTime = entry.startTime;\n                }\n                else {\n                    session = {\n                        value: entry.value,\n                        firstStartTime: entry.startTime,\n                        previousStartTime: entry.startTime\n                    };\n                }\n            }\n            if (session &&\n                (this.cumulativeLayoutShift === undefined || session.value > this.cumulativeLayoutShift)) {\n                this.cumulativeLayoutShift = session.value;\n            }\n        });\n        observer.observe({ type: 'layout-shift', buffered: true });\n        this.observers.push(observer);\n    }\n}\n\nexport { WebVitals };\n", "import { createNoopClient, createClient, InMemoryQueue } from '@bugsnag/core-performance';\nimport createFetchDeliveryFactory from '@bugsnag/delivery-fetch-performance';\nimport { createFetchRequestTracker, createXmlHttpRequestTracker } from '@bugsnag/request-tracker-performance';\nimport { FullPageLoadPlugin } from './auto-instrumentation/full-page-load-plugin.js';\nimport { NetworkRequestPlugin } from './auto-instrumentation/network-request-plugin.js';\nimport { ResourceLoadPlugin } from './auto-instrumentation/resource-load-plugin.js';\nimport { RouteChangePlugin } from './auto-instrumentation/route-change-plugin.js';\nimport createBrowserBackgroundingListener from './backgrounding-listener.js';\nimport createClock from './clock.js';\nimport { createSchema } from './config.js';\nimport { createNoopRoutingProvider, createDefaultRoutingProvider } from './default-routing-provider.js';\nimport idGenerator from './id-generator.js';\nimport createOnSettle, { createNoopOnSettle } from './on-settle/index.js';\nimport makeBrowserPersistence from './persistence.js';\nimport createResourceAttributesSource from './resource-attributes-source.js';\nimport { createSpanAttributesSource } from './span-attributes-source.js';\nimport { WebVitals } from './web-vitals.js';\n\nlet onSettle;\nlet DefaultRoutingProvider;\nlet BugsnagPerformance;\nif (typeof window === 'undefined' || typeof document === 'undefined') {\n    onSettle = createNoopOnSettle();\n    DefaultRoutingProvider = createNoopRoutingProvider();\n    BugsnagPerformance = createNoopClient();\n}\nelse {\n    const backgroundingListener = createBrowserBackgroundingListener(window);\n    const spanAttributesSource = createSpanAttributesSource(document);\n    const clock = createClock(performance, backgroundingListener);\n    const persistence = makeBrowserPersistence(window);\n    const resourceAttributesSource = createResourceAttributesSource(navigator, persistence);\n    const fetchRequestTracker = createFetchRequestTracker(window, clock);\n    const xhrRequestTracker = createXmlHttpRequestTracker(XMLHttpRequest, clock, document);\n    const webVitals = new WebVitals(performance, clock, window.PerformanceObserver);\n    onSettle = createOnSettle(clock, window, fetchRequestTracker, xhrRequestTracker, performance);\n    DefaultRoutingProvider = createDefaultRoutingProvider(onSettle, window.location);\n    BugsnagPerformance = createClient({\n        backgroundingListener,\n        clock,\n        resourceAttributesSource,\n        spanAttributesSource,\n        deliveryFactory: createFetchDeliveryFactory(window.fetch, clock, backgroundingListener),\n        idGenerator,\n        schema: createSchema(window.location.hostname, new DefaultRoutingProvider()),\n        plugins: (spanFactory, spanContextStorage) => [\n            onSettle,\n            new FullPageLoadPlugin(document, window.location, spanFactory, webVitals, onSettle, backgroundingListener, performance),\n            // ResourceLoadPlugin should always come after FullPageLoad plugin, as it should use that\n            // span context as the parent of it's spans\n            new ResourceLoadPlugin(spanFactory, spanContextStorage, window.PerformanceObserver),\n            new NetworkRequestPlugin(spanFactory, spanContextStorage, fetchRequestTracker, xhrRequestTracker),\n            new RouteChangePlugin(spanFactory, window.location, document)\n        ],\n        persistence,\n        retryQueueFactory: (delivery, retryQueueMaxSize) => new InMemoryQueue(delivery, retryQueueMaxSize)\n    });\n}\nconst BugsnagPerformance$1 = BugsnagPerformance;\n\nexport { DefaultRoutingProvider, BugsnagPerformance$1 as default, onSettle };\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,SAAS,IAAK,KAAK,MAAM;AACxC,UAAI,IAAI,cAAc;AACtB,aAAO,EAAE,OAAO,EAAE,SAAS,IAAI;AAAA,IACjC;AAAA;AAAA;;;ACHA;AAAA;AAAA,QAAI,MAAM;AAEV,QAAI,MAAM,OAAO,WAAW,WAAW,SAAS;AAChD,QAAI,cAAc;AAClB,SAAS,QAAQ,KAAK;AACpB,UAAI,OAAO,eAAe,KAAK,KAAK,IAAI;AAAG;AAAA,IAC7C;AAFS;AAGT,QAAI,kBAAkB,UAAU,YAAY,UAAU,UAAU,SAAS;AACzE,QAAI,WAAW,KAAK,kBAClB,UAAU,UAAU,QAAQ,SAAS,EAAE,IACvC,YAAY,SAAS,EAAE,GAAG,CAAC;AAE7B,WAAO,UAAU,SAAS,cAAe;AACvC,aAAO;AAAA,IACT;AAAA;AAAA;;;ACdA;AAAA;AAYA,QAAI,cAAc;AAClB,QAAI,MAAM;AAEV,QAAI,IAAI;AAAR,QACE,YAAY;AADd,QAEE,OAAO;AAFT,QAGE,iBAAiB,KAAK,IAAI,MAAM,SAAS;AAE3C,aAAS,cAAe;AACtB,aAAO,KAAK,KAAK,OAAO,IACtB,kBAAkB,GACjB,SAAS,IAAI,GAAG,SAAS;AAAA,IAC9B;AAEA,aAAS,cAAe;AACtB,UAAI,IAAI,iBAAiB,IAAI;AAC7B;AACA,aAAO,IAAI;AAAA,IACb;AAEA,aAASA,QAAQ;AAGf,UAAI,SAAS,KAKX,aAAa,oBAAI,KAAK,GAAE,QAAQ,EAAG,SAAS,IAAI,GAGhD,UAAU,IAAI,YAAY,EAAE,SAAS,IAAI,GAAG,SAAS,GAKrD,QAAQ,YAAY,GAGpB,SAAS,YAAY,IAAI,YAAY;AAEvC,aAAO,SAAS,YAAY,UAAU,QAAQ;AAAA,IAChD;AAEA,IAAAA,MAAK,cAAc;AAEnB,WAAO,UAAUA;AAAA;AAAA;;;AC1DjB,IAAM,YAAY,CAAC,UAAU,UAAU,QAAQ,UAAU;AACzD,IAAM,WAAW,CAAC,UAAU,CAAC,CAAC,SAAS,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,KAAK;AACxF,IAAM,WAAW,CAAC,UAAU,OAAO,UAAU,YAAY,OAAO,SAAS,KAAK,KAAK,CAAC,OAAO,MAAM,KAAK;AACtG,IAAM,WAAW,CAAC,UAAU,OAAO,UAAU;AAC7C,IAAM,qBAAqB,CAAC,UAAU,SAAS,KAAK,KAAK,MAAM,SAAS;AACxE,IAAM,WAAW,CAAC,UAAU,SAAS,KAAK,KACtC,OAAO,MAAM,UAAU,cACvB,OAAO,MAAM,SAAS,cACtB,OAAO,MAAM,SAAS,cACtB,OAAO,MAAM,UAAU;AAC3B,IAAM,gBAAgB,CAAC,UAAU,MAAM,QAAQ,KAAK,KAAK,MAAM,MAAM,kBAAkB;AACvF,IAAM,wBAAwB,CAAC,UAAU,MAAM,QAAQ,KAAK,KAAK,MAAM,MAAM,UAAQ,mBAAmB,IAAI,KAAK,gBAAgB,MAAM;AACvI,SAAS,uBAAuB,OAAO;AACnC,SAAO,SAAS,KAAK,KACjB,SAAS,MAAM,KAAK,KACpB,SAAS,MAAM,IAAI;AAC3B;AACA,IAAM,gBAAgB,CAAC,UAAU,SAAS,KAAK,KAC3C,OAAO,MAAM,OAAO,YACpB,OAAO,MAAM,YAAY,YACzB,OAAO,MAAM,YAAY;AAC7B,SAAS,OAAO,OAAO;AACnB,SAAO,SAAS,KAAK,KAAK,iBAAiB;AAC/C;AAGA,SAAS,WAAW,OAAO;AAEvB,SAAO,OAAO,UAAU,YAAY,qBAAqB,KAAK,KAAK;AACvE;AACA,SAAS,SAAS,OAAO;AACrB,SAAO,SAAS,KAAK,KAAK,OAAO,MAAM,cAAc;AACzD;AACA,SAAS,cAAc,OAAO;AAC1B,SAAO,MAAM,QAAQ,KAAK,KAAK,MAAM,MAAM,YAAU,SAAS,MAAM,CAAC;AACzE;;;ACjCA,IAAM,iBAAN,MAAqB;AAAA,EACjB,YAAY,eAAe;AACvB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,IAAI,MAAM,OAAO;AACb,QAAI,OAAO,UAAU,YAAY,OAAO,UAAU,aAAa,SAAS,KAAK,GAAG;AAC5E,WAAK,WAAW,IAAI,MAAM,KAAK;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,OAAO,MAAM;AACT,SAAK,WAAW,OAAO,IAAI;AAAA,EAC/B;AAAA,EACA,SAAS;AACL,WAAO,MAAM,KAAK,KAAK,UAAU,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,gBAAgB,KAAK,KAAK,CAAC;AAAA,EACxF;AACJ;AACA,IAAM,qBAAN,cAAiC,eAAe;AAAA,EAC5C,YAAY,cAAc,YAAY,SAAS,YAAY;AACvD,UAAM,gBAAgB,oBAAI,IAAI;AAAA,MAC1B,CAAC,0BAA0B,YAAY;AAAA,MACvC,CAAC,sBAAsB,OAAO;AAAA,MAC9B,CAAC,yBAAyB,UAAU;AAAA,IACxC,CAAC;AACD,QAAI,WAAW,SAAS,GAAG;AACvB,oBAAc,IAAI,mBAAmB,UAAU;AAAA,IACnD;AACA,UAAM,aAAa;AAAA,EACvB;AACJ;AACA,SAAS,gBAAgB,KAAK,WAAW;AACrC,UAAQ,OAAO,WAAW;AAAA,IACtB,KAAK;AACD,UAAI,OAAO,MAAM,SAAS,KAAK,CAAC,OAAO,SAAS,SAAS,GAAG;AACxD,eAAO;AAAA,MACX;AAEA,UAAI,QAAQ,wBAAwB,OAAO,UAAU,SAAS,GAAG;AAC7D,eAAO,EAAE,KAAK,OAAO,EAAE,UAAU,GAAG,SAAS,GAAG,EAAE;AAAA,MACtD;AACA,aAAO,EAAE,KAAK,OAAO,EAAE,aAAa,UAAU,EAAE;AAAA,IACpD,KAAK;AACD,aAAO,EAAE,KAAK,OAAO,EAAE,WAAW,UAAU,EAAE;AAAA,IAClD,KAAK;AACD,aAAO,EAAE,KAAK,OAAO,EAAE,aAAa,UAAU,EAAE;AAAA,IACpD;AACI,aAAO;AAAA,EACf;AACJ;;;ACjDA,IAAM,8BAA8B;AACpC,SAAS,0BAA0B,cAAc;AAC7C,SAAO,KAAK,MAAM,eAAe,2BAA2B;AAChE;;;ACDA,IAAM,SAAS;AAAA,EACX,YAAY;AAAA,IACR,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AAAA,EACA,UAAU;AAAA,IACN,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AAAA,EACA,QAAQ;AAAA,IACJ,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU,CAAC,UAAU,SAAS,KAAK,KAAK,iBAAiB,KAAK,KAAK;AAAA,EACvE;AAAA,EACA,QAAQ;AAAA,IACJ,cAAc;AAAA,MACV,MAAM,SAAS;AAAE,gBAAQ,MAAM,OAAO;AAAA,MAAG;AAAA,MACzC,KAAK,SAAS;AAAE,gBAAQ,KAAK,OAAO;AAAA,MAAG;AAAA,MACvC,KAAK,SAAS;AAAE,gBAAQ,KAAK,OAAO;AAAA,MAAG;AAAA,MACvC,MAAM,SAAS;AAAE,gBAAQ,MAAM,OAAO;AAAA,MAAG;AAAA,IAC7C;AAAA,IACA,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AAAA,EACA,cAAc;AAAA,IACV,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AAAA,EACA,sBAAsB;AAAA,IAClB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU,CAAC,UAAU,UAAU,QAAQ,cAAc,KAAK;AAAA,EAC9D;AAAA,EACA,qBAAqB;AAAA,IACjB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU,CAAC,UAAU,SAAS,KAAK,KAAK,SAAS,KAAK,SAAS;AAAA,EACnE;AAAA,EACA,SAAS;AAAA,IACL,cAAc,CAAC;AAAA,IACf,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AACJ;AACA,SAAS,eAAe,QAAQC,SAAQ;AACpC,MAAI,OAAO,WAAW,UAAU;AAC5B,aAAS,EAAE,QAAQ,OAAO;AAAA,EAC9B;AACA,MAAI,CAAC,SAAS,MAAM,KAAK,CAAC,SAAS,OAAO,MAAM,KAAK,OAAO,OAAO,WAAW,GAAG;AAC7E,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC5C;AACA,MAAI,WAAW;AACf,QAAM,qBAAqB,CAAC;AAC5B,aAAW,UAAU,OAAO,KAAKA,OAAM,GAAG;AACtC,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,MAAM,GAAG;AACtD,UAAIA,QAAO,MAAM,EAAE,SAAS,OAAO,MAAM,CAAC,GAAG;AACzC,2BAAmB,MAAM,IAAI,OAAO,MAAM;AAAA,MAC9C,OACK;AACD,oBAAY;AAAA,MAAS,MAAM,IAAIA,QAAO,MAAM,EAAE,OAAO,SAAS,OAAO,OAAO,MAAM,CAAC;AACnF,2BAAmB,MAAM,IAAIA,QAAO,MAAM,EAAE;AAAA,MAChD;AAAA,IACJ,OACK;AACD,yBAAmB,MAAM,IAAIA,QAAO,MAAM,EAAE;AAAA,IAChD;AAAA,EACJ;AAEA,qBAAmB,SAAS,OAAO;AACnC,qBAAmB,mBAAmB,OAAO,oBAAoB;AACjE,qBAAmB,2BAA2B,OAAO,4BAA4B,KAAK;AACtF,MAAI,SAAS,SAAS,GAAG;AACrB,uBAAmB,OAAO,KAAK,wBAAwB,QAAQ,EAAE;AAAA,EACrE;AACA,SAAO;AACX;;;AChFA,IAAM,iBAAN,MAAqB;AAAA,EACjB,YAAY,UAAU,eAAe,YAAY,SAAS,oBAAoB,SAAS;AACnF,SAAK,QAAQ,CAAC;AACd,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,qBAAqB;AAC1B,SAAK,UAAU;AACf,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AAAA,EACrC;AAAA,EACA,OAAO;AACH,QAAI,KAAK,YAAY,MAAM;AACvB,mBAAa,KAAK,OAAO;AACzB,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,QAAQ;AACJ,SAAK,KAAK;AACV,SAAK,UAAU,WAAW,KAAK,OAAO,KAAK,cAAc,wBAAwB;AAAA,EACrF;AAAA,EACA,IAAI,MAAM;AACN,QAAI,KAAK,cAAc,wBACnB,CAAC,KAAK,cAAc,qBAAqB,SAAS,KAAK,cAAc,YAAY,GAAG;AACpF;AAAA,IACJ;AACA,SAAK,MAAM,KAAK,IAAI;AACpB,QAAI,KAAK,MAAM,UAAU,KAAK,cAAc,kBAAkB;AAC1D,WAAK,MAAM;AAAA,IACf,OACK;AACD,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ;AACV,SAAK,KAAK;AACV,UAAM,QAAQ,KAAK,aAAa;AAEhC,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,UAAM,UAAU,MAAM,KAAK,QAAQ,OAAO,KAAK;AAC/C,UAAM,YAAY,KAAK,IAAI;AAC3B,QAAI;AACA,YAAM,WAAW,MAAM,KAAK,SAAS,KAAK,OAAO;AACjD,UAAI,SAAS,wBAAwB,QAAW;AAC5C,aAAK,mBAAmB,eAAe,SAAS,mBAAmB;AAAA,MACvE;AACA,cAAQ,SAAS,OAAO;AAAA,QACpB,KAAK;AACD,eAAK,WAAW,MAAM;AACtB;AAAA,QACJ,KAAK;AACD,eAAK,cAAc,OAAO,KAAK,iBAAiB;AAChD;AAAA,QACJ,KAAK;AACD,eAAK,cAAc,OAAO,KAAK,wCAAwC;AACvE,eAAK,WAAW,IAAI,SAAS,SAAS;AACtC;AAAA,QACJ;AACI,mBAAS;AAAA,MACjB;AAAA,IACJ,SACO,KAAK;AACR,WAAK,cAAc,OAAO,KAAK,iBAAiB;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,eAAe;AACX,QAAI,KAAK,MAAM,WAAW,GAAG;AACzB;AAAA,IACJ;AAEA,UAAM,QAAQ,CAAC;AACf,UAAM,cAAc,KAAK,QAAQ;AACjC,eAAW,QAAQ,KAAK,OAAO;AAC3B,UAAI,KAAK,oBAAoB,MAAM,YAAY,KAAK;AAChD,aAAK,sBAAsB;AAAA,MAC/B;AACA,UAAI,KAAK,QAAQ,OAAO,IAAI,GAAG;AAC3B,cAAM,KAAK,IAAI;AAAA,MACnB;AAAA,IACJ;AAEA,SAAK,QAAQ,CAAC;AAEd,QAAI,MAAM,WAAW,GAAG;AACpB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AC3FA,IAAM,aAAN,MAAiB;AAAA,EACb,cAAc;AACV,SAAK,SAAS,CAAC;AAAA,EACnB;AAAA,EACA,IAAI,MAAM,MAAM;AACZ,SAAK,OAAO,KAAK,EAAE,MAAM,KAAK,CAAC;AAAA,EACnC;AAAA,EACA,OAAO,OAAO;AACV,WAAO,KAAK,OAAO,IAAI,CAAC,EAAE,MAAM,KAAK,OAAO,EAAE,MAAM,cAAc,MAAM,2BAA2B,IAAI,EAAE,EAAE;AAAA,EAC/G;AACJ;;;ACQA,SAAS,sBAAsB,SAAS;AACpC,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK;AACzC,UAAM,WAAW,IAAI;AACrB,UAAM,UAAU,OAAO,SAAS,QAAQ,MAAM,UAAU,WAAW,CAAC,GAAG,EAAE;AACzE,oBAAgB,eAAe,aAAa;AAAA,EAChD;AACA,SAAO;AACX;;;ACtBA,SAAS,WAAW,MAAM,OAAO;AAC7B,SAAO;AAAA,IACH,MAAM,KAAK;AAAA,IACX,MAAM,KAAK;AAAA,IACX,QAAQ,KAAK;AAAA,IACb,SAAS,KAAK;AAAA,IACd,cAAc,KAAK;AAAA,IACnB,mBAAmB,MAAM,2BAA2B,KAAK,SAAS;AAAA,IAClE,iBAAiB,MAAM,2BAA2B,KAAK,OAAO;AAAA,IAC9D,YAAY,KAAK,WAAW,OAAO;AAAA,IACnC,QAAQ,KAAK,OAAO,OAAO,KAAK;AAAA,EACpC;AACJ;AACA,IAAM,eAAN,MAAmB;AAAA,EACf,YAAY,IAAI,SAAS,MAAMC,YAAW,YAAY,cAAc;AAChE,SAAK,OAAO;AACZ,SAAK,SAAS,IAAI,WAAW;AAC7B,SAAK,KAAK;AACV,SAAK,UAAU;AACf,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,YAAYA;AACjB,SAAK,aAAa;AAClB,SAAK,eAAe,sBAAsB,KAAK,OAAO;AAAA,EAC1D;AAAA,EACA,SAAS,MAAM,MAAM;AACjB,SAAK,OAAO,IAAI,MAAM,IAAI;AAAA,EAC9B;AAAA,EACA,aAAa,MAAM,OAAO;AACtB,SAAK,WAAW,IAAI,MAAM,KAAK;AAAA,EACnC;AAAA,EACA,IAAI,SAAS,qBAAqB;AAC9B,SAAK,UAAU;AACf,QAAI,uBAAuB;AAC3B,SAAK,WAAW,IAAI,sBAAsB,qBAAqB,GAAG;AAClE,WAAO;AAAA,MACH,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,MACd,WAAW,KAAK;AAAA,MAChB,YAAY,KAAK;AAAA,MACjB,QAAQ,KAAK;AAAA,MACb,cAAc,KAAK;AAAA,MACnB;AAAA,MACA,IAAI,sBAAsB;AACtB,eAAO;AAAA,MACX;AAAA,MACA,IAAI,oBAAoBC,sBAAqB;AACzC,+BAAuBA;AACvB,aAAK,WAAW,IAAI,sBAAsB,qBAAqB,GAAG;AAAA,MACtE;AAAA,MACA,cAAc,KAAK;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,UAAU;AACN,WAAO,KAAK,YAAY;AAAA,EAC5B;AACJ;AACA,IAAM,uBAAuB;AAAA,EACzB,WAAW;AAAA,IACP,SAAS;AAAA,IACT,iBAAiB,MAAM;AAAA,IACvB,UAAU;AAAA,EACd;AAAA,EACA,eAAe;AAAA,IACX,SAAS;AAAA,IACT,iBAAiB,MAAM;AAAA,IACvB,UAAU,CAAC,UAAU,UAAU,QAAQ,cAAc,KAAK;AAAA,EAC9D;AAAA,EACA,oBAAoB;AAAA,IAChB,SAAS;AAAA,IACT,iBAAiB,MAAM;AAAA,IACvB,UAAU;AAAA,EACd;AAAA,EACA,cAAc;AAAA,IACV,SAAS;AAAA,IACT,iBAAiB,MAAM;AAAA,IACvB,UAAU;AAAA,EACd;AACJ;;;AClFA,IAAM,sBAAN,MAA0B;AAAA,EACtB,YAAY,OAAO,eAAe,yBAAyB;AACvD,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,MAAM,OAAO,OAAO;AAChB,UAAM,qBAAqB,MAAM,KAAK,wBAAwB,KAAK,aAAa;AAChF,UAAM,YAAY,MAAM,MAAM,MAAM;AACpC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,gBAAU,CAAC,IAAI,WAAW,MAAM,CAAC,GAAG,KAAK,KAAK;AAAA,IAClD;AACA,UAAM,kBAAkB;AAAA,MACpB,eAAe;AAAA,QACX;AAAA,UACI,UAAU,EAAE,YAAY,mBAAmB,OAAO,EAAE;AAAA,UACpD,YAAY,CAAC,EAAE,OAAO,UAAU,CAAC;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,QACL,mBAAmB,KAAK,cAAc;AAAA,QACtC,gBAAgB;AAAA,QAChB,yBAAyB,KAAK,uBAAuB,KAAK;AAAA,MAC9D;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,uBAAuB,OAAO;AAC1B,QAAI,MAAM,WAAW,GAAG;AACpB,aAAO;AAAA,IACX;AACA,UAAM,aAAa,uBAAO,OAAO,IAAI;AACrC,eAAW,QAAQ,OAAO;AACtB,YAAM,gBAAgB,WAAW,KAAK,oBAAoB,GAAG,KAAK;AAClE,iBAAW,KAAK,oBAAoB,GAAG,IAAI,gBAAgB;AAAA,IAC/D;AACA,UAAM,mBAAmB,OAAO,KAAK,UAAU;AAC/C,UAAM,QAAQ,MAAM,iBAAiB,MAAM;AAC3C,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,EAAE,GAAG;AAC9C,YAAM,iBAAiB,iBAAiB,CAAC;AACzC,YAAM,CAAC,IAAI,GAAG,cAAc,IAAI,WAAW,cAAc,CAAC;AAAA,IAC9D;AACA,WAAO,MAAM,KAAK,GAAG;AAAA,EACzB;AACJ;AACA,IAAM,aAAa,oBAAI,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AAC/C,SAAS,4BAA4B,YAAY;AAC7C,MAAI,cAAc,OAAO,aAAa,KAAK;AACvC,WAAO;AAAA,EACX;AACA,MAAI,cAAc,OAAO,aAAa,OAAO,CAAC,WAAW,IAAI,UAAU,GAAG;AACtE,WAAO;AAAA,EACX;AACA,SAAO;AACX;;;ACzDA,IAAM,qBAAqB,KAAK;AAChC,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAY,UAAU,QAAQ;AAC1B,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,MACX,MAAM,EAAE,eAAe,CAAC,EAAE;AAAA,MAC1B,SAAS;AAAA,QACL,mBAAmB;AAAA,QACnB,gBAAgB;AAAA,QAChB,yBAAyB;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,oBAAoB;AAEtB,WAAO,MAAM;AACT,YAAM,WAAW,MAAM,KAAK,SAAS,KAAK,KAAK,OAAO;AAGtD,UAAI,SAAS,wBAAwB,QAAW;AAC5C,eAAO,SAAS;AAAA,MACpB;AACA,YAAM,KAAK,mBAAmB;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,WAAO,IAAI,QAAQ,aAAW;AAC1B,iBAAW,SAAS,kBAAkB;AAAA,IAC1C,CAAC;AAAA,EACL;AACJ;;;AC9BA,IAAM,mCAAmC,KAAK,KAAK,KAAK;AACxD,IAAM,qBAAN,MAAM,oBAAmB;AAAA,EACrB,aAAa,OAAO,aAAa,SAAS,oBAAoB;AAC1D,UAAM,uBAAuB,MAAM,YAAY,KAAK,8BAA8B;AAClF,QAAI;AACJ,QAAI;AACJ,QAAI,yBAAyB,QAAW;AAGpC,cAAQ,cAAc;AACtB,+BAAyB;AAEzB,8BAAwB;AAAA,IAC5B,WACS,qBAAqB,OAAO,KAAK,IAAI,IAAI,kCAAkC;AAGhF,cAAQ,cAAc,qBAAqB;AAC3C,+BAAyB,qBAAqB;AAE9C,8BAAwB;AAAA,IAC5B,OACK;AAGD,cAAQ,cAAc,qBAAqB;AAC3C,+BAAyB,qBAAqB;AAE9C,8BAAwB,oCAAoC,KAAK,IAAI,IAAI;AAAA,IAC7E;AACA,WAAO,IAAI,oBAAmB,aAAa,SAAS,oBAAoB,uBAAuB,sBAAsB;AAAA,EACzH;AAAA,EACA,YAAY,aAAa,SAAS,oBAAoB,uBAAuB,wBAAwB;AACjG,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB,qBAAqB;AAAA,EACpD;AAAA,EACA,eAAe,gBAAgB;AAC3B,SAAK,sBAAsB,KAAK,IAAI;AACpC,SAAK,QAAQ,cAAc;AAC3B,SAAK,sBAAsB,gCAAgC;AAI3D,WAAO,KAAK,YAAY,KAAK,gCAAgC;AAAA,MACzD,OAAO;AAAA,MACP,MAAM,KAAK;AAAA,IACf,CAAC;AAAA,EACL;AAAA,EACA,sBAAsB,cAAc;AAChC,iBAAa,KAAK,OAAO;AACzB,UAAM,mCAAmC,KAAK;AAC9C,SAAK,UAAU,WAAW,YAAY;AAClC,YAAM,cAAc,MAAM,KAAK,mBAAmB,kBAAkB;AAGpE,UAAI,qCAAqC,KAAK,qBAAqB;AAC/D,aAAK,eAAe,WAAW;AAAA,MACnC;AAAA,IACJ,GAAG,YAAY;AAAA,EACnB;AACJ;;;AC9DA,IAAM,qBAAN,MAAyB;AAAA,EACrB,cAAc;AACV,SAAK,QAAQ,CAAC;AAAA,EAClB;AAAA,EACA,IAAI,MAAM;AACN,SAAK,MAAM,KAAK,IAAI;AAAA,EACxB;AACJ;;;ACPA,SAAS,oCAAoC,aAAa;AACtD,SAAO,KAAK,MAAM,cAAc,UAAU;AAC9C;AACA,IAAM,UAAN,MAAc;AAAA,EACV,YAAY,oBAAoB;AAI5B,SAAK,eAAe;AACpB,SAAK,oBAAoB,oCAAoC,kBAAkB;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,YAAY,aAAa;AACzB,SAAK,eAAe;AACpB,SAAK,oBAAoB,oCAAoC,WAAW;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,kBAAkB;AAClB,WAAO;AAAA,MACH,KAAK,KAAK;AAAA,MACV,QAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,OAAO,MAAM;AACT,WAAO,KAAK,gBAAgB,KAAK,oBAAoB;AAAA,EACzD;AAAA,EACA,aAAa,cAAc;AACvB,WAAO,gBAAgB,KAAK,gBAAgB;AAAA,EAChD;AACJ;;;AC7CA,SAAS,kBAAkB,OAAO,OAAO;AACrC,MAAI,UAAU;AACV,WAAO;AACX,MAAI,UAAU,UAAa,UAAU,QAAW;AAC5C,WAAO,MAAM,OAAO,MAAM,MAAM,MAAM,YAAY,MAAM;AAAA,EAC5D;AACA,SAAO;AACX;AACA,IAAM,4BAAN,MAAgC;AAAA,EAC5B,YAAY,uBAAuB,eAAe,CAAC,GAAG;AAClD,SAAK,iBAAiB;AACtB,SAAK,0BAA0B,CAAC,UAAU;AACtC,WAAK,iBAAiB,UAAU;AAGhC,WAAK,aAAa,SAAS;AAAA,IAC/B;AACA,SAAK,eAAe;AACpB,0BAAsB,cAAc,KAAK,uBAAuB;AAAA,EACpE;AAAA,EACA,EAAE,OAAO,QAAQ,IAAI;AACjB,aAAS,IAAI,KAAK,aAAa,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACpD,YAAM,KAAK,aAAa,CAAC;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,KAAK,SAAS;AACV,QAAI,QAAQ,QAAQ,KAAK,KAAK,gBAAgB;AAC1C,WAAK,aAAa,KAAK,OAAO;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,IAAI,SAAS;AACT,QAAI,kBAAkB,SAAS,KAAK,OAAO,GAAG;AAC1C,WAAK,aAAa,IAAI;AAAA,IAC1B;AACA,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,IAAI,QAAQ;AACR,SAAK,qBAAqB;AAC1B,WAAO,KAAK,aAAa,SAAS,IAC5B,KAAK,aAAa,CAAC,IACnB;AAAA,EACV;AAAA,EACA,IAAI,UAAU;AACV,SAAK,qBAAqB;AAC1B,WAAO,KAAK,aAAa,SAAS,IAC5B,KAAK,aAAa,KAAK,aAAa,SAAS,CAAC,IAC9C;AAAA,EACV;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,aAAa,SAAS,KAC9B,KAAK,aAAa,KAAK,aAAa,SAAS,CAAC,EAAE,QAAQ,MAAM,OAAO;AACrE,WAAK,aAAa,IAAI;AAAA,IAC1B;AAAA,EACJ;AACJ;;;ACpDA,SAAS,aAAa,OAAO,MAAM;AAC/B,MAAI,SAAS,IAAI,GAAG;AAGhB,WAAO;AAAA,EACX;AACA,MAAI,gBAAgB,MAAM;AACtB,WAAO,MAAM,QAAQ,IAAI;AAAA,EAC7B;AACA,SAAO,MAAM,IAAI;AACrB;;;ACPA,IAAM,mBAAmB;AACzB,IAAM,cAAN,MAAkB;AAAA,EACd,YAAY,WAAW,SAASC,cAAa,sBAAsB,OAAO,uBAAuB,QAAQ,oBAAoB;AACzH,SAAK,YAAY,oBAAI,QAAQ;AAC7B,SAAK,iBAAiB;AACtB,SAAK,0BAA0B,CAAC,UAAU;AACtC,WAAK,iBAAiB,UAAU;AAGhC,WAAK,YAAY,oBAAI,QAAQ;AAAA,IACjC;AACA,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,cAAcA;AACnB,SAAK,uBAAuB;AAC5B,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,qBAAqB;AAE1B,0BAAsB,cAAc,KAAK,uBAAuB;AAAA,EACpE;AAAA,EACA,UAAU,MAAM,SAAS;AACrB,UAAM,gBAAgB,aAAa,KAAK,OAAO,QAAQ,SAAS;AAChE,UAAM,SAAS,KAAK,YAAY,SAAS,EAAE;AAI3C,UAAMC,iBAAgB,cAAc,QAAQ,aAAa,KAAK,QAAQ,kBAAkB,OAClF,QAAQ,gBACR,KAAK,mBAAmB;AAC9B,UAAM,eAAeA,iBAAgBA,eAAc,KAAK;AACxD,UAAM,UAAUA,iBAAgBA,eAAc,UAAU,KAAK,YAAY,SAAS,GAAG;AACrF,UAAM,aAAa,IAAI,eAAe,oBAAI,IAAI,CAAC;AAC/C,QAAI,OAAO,QAAQ,iBAAiB,WAAW;AAC3C,iBAAW,IAAI,4BAA4B,QAAQ,YAAY;AAAA,IACnE;AACA,UAAM,OAAO,IAAI,aAAa,QAAQ,SAAS,MAAM,eAAe,YAAY,YAAY;AAE5F,QAAI,KAAK,gBAAgB;AACrB,WAAK,UAAU,IAAI,IAAI;AACvB,UAAI,QAAQ,uBAAuB,OAAO;AACtC,aAAK,mBAAmB,KAAK,IAAI;AAAA,MACrC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU,WAAW,QAAQ;AACzB,SAAK,YAAY;AACjB,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,QAAQ,MAAM,SAAS;AAEnB,QAAI,CAAC,KAAK,UAAU,OAAO,IAAI,GAAG;AAG9B,UAAI,CAAC,KAAK,QAAQ,GAAG;AACjB,aAAK,OAAO,KAAK,kDAAkD;AAAA,MACvE;AACA;AAAA,IACJ;AAEA,QAAI,YAAY;AACZ;AACJ,SAAK,qBAAqB,kBAAkB,IAAI;AAChD,UAAM,YAAY,KAAK,IAAI,SAAS,KAAK,QAAQ,eAAe;AAChE,SAAK,mBAAmB,IAAI,IAAI;AAChC,QAAI,KAAK,QAAQ,OAAO,SAAS,GAAG;AAChC,WAAK,UAAU,IAAI,SAAS;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,YAAY,MAAM;AACd,WAAO;AAAA,MACH,IAAI,KAAK;AACL,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,IAAI,UAAU;AACV,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,IAAI,eAAe;AACf,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,SAAS,MAAM,KAAK,QAAQ;AAAA,MAC5B,KAAK,CAAC,YAAY;AACd,cAAM,cAAc,aAAa,KAAK,OAAO,OAAO;AACpD,aAAK,QAAQ,MAAM,WAAW;AAAA,MAClC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,oBAAoB,MAAM,SAASC,UAAS,sBAAsB;AAC9D,QAAI,WAAW;AACf,UAAM,eAAe,CAAC;AACtB,QAAI,OAAO,SAAS,UAAU;AAC1B,kBAAY;AAAA,mCAAsC,OAAO,IAAI;AAC7D,aAAO,OAAO,IAAI;AAAA,IACtB;AACA,QAAI,YAAY,UAAa,CAAC,SAAS,OAAO,GAAG;AAC7C,kBAAY;AAAA,IAChB,OACK;AACD,YAAM,cAAc,WAAW,CAAC;AAChC,iBAAW,UAAU,OAAO,KAAKA,OAAM,GAAG;AACtC,YAAI,OAAO,UAAU,eAAe,KAAK,aAAa,MAAM,KAAK,YAAY,MAAM,MAAM,QAAW;AAChG,cAAIA,QAAO,MAAM,EAAE,SAAS,YAAY,MAAM,CAAC,GAAG;AAC9C,yBAAa,MAAM,IAAI,YAAY,MAAM;AAAA,UAC7C,OACK;AACD,wBAAY;AAAA,MAAS,MAAM,IAAIA,QAAO,MAAM,EAAE,OAAO,SAAS,OAAO,YAAY,MAAM,CAAC;AACxF,yBAAa,MAAM,IAAIA,QAAO,MAAM,EAAE,gBAAgB,YAAY,MAAM,CAAC;AAAA,UAC7E;AAAA,QACJ,OACK;AACD,uBAAa,MAAM,IAAIA,QAAO,MAAM,EAAE,gBAAgB,YAAY,MAAM,CAAC;AAAA,QAC7E;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,SAAS,SAAS,GAAG;AACrB,WAAK,OAAO,KAAK,uBAAuB,QAAQ,EAAE;AAAA,IACtD;AACA,WAAO,EAAE,MAAM,SAAS,aAAa;AAAA,EACzC;AACJ;;;ACnHA,SAAS,aAAa,SAAS;AAC3B,QAAM,qBAAqB,IAAI,mBAAmB;AAClD,MAAI,YAAY;AAChB,QAAM,qBAAqB,QAAQ,sBAAsB,IAAI,0BAA0B,QAAQ,qBAAqB;AACpH,MAAI,SAAS,QAAQ,OAAO,OAAO;AACnC,QAAM,UAAU,IAAI,QAAQ,CAAG;AAC/B,QAAM,cAAc,IAAI,YAAY,WAAW,SAAS,QAAQ,aAAa,QAAQ,sBAAsB,QAAQ,OAAO,QAAQ,uBAAuB,QAAQ,kBAAkB;AACnL,QAAM,UAAU,QAAQ,QAAQ,aAAa,kBAAkB;AAC/D,SAAO,OAAO,OAAO,EAAE,OAAO,CAAC,WAAW;AAClC,UAAM,gBAAgB,eAAe,QAAQ,QAAQ,MAAM;AAC3D,UAAM,WAAW,QAAQ,gBAAgB,cAAc,QAAQ;AAC/D,YAAQ,qBAAqB,UAAU,aAAa;AACpD,uBAAmB,OAAO,QAAQ,aAAa,SAAS,IAAI,mBAAmB,UAAU,cAAc,MAAM,CAAC,EAAE,KAAK,CAAC,YAAY;AAC9H,kBAAY,IAAI,eAAe,UAAU,eAAe,QAAQ,kBAAkB,UAAU,cAAc,iBAAiB,GAAG,SAAS,SAAS,IAAI,oBAAoB,QAAQ,OAAO,eAAe,QAAQ,wBAAwB,CAAC;AAEvO,iBAAW,QAAQ,mBAAmB,OAAO;AACzC,kBAAU,IAAI,IAAI;AAAA,MACtB;AAKA,cAAQ,sBAAsB,cAAc,WAAS;AACjD,kBAAU,MAAM;AAAA,MACpB,CAAC;AACD,eAAS,cAAc;AACvB,kBAAY,UAAU,WAAW,MAAM;AAAA,IAC3C,CAAC;AACD,eAAW,UAAU,cAAc,SAAS;AACxC,cAAQ,KAAK,MAAM;AAAA,IACvB;AACA,eAAW,UAAU,SAAS;AAC1B,aAAO,UAAU,eAAe,WAAW;AAAA,IAC/C;AAAA,EACJ,GAAG,WAAW,CAAC,MAAM,gBAAgB;AACjC,UAAM,eAAe,YAAY,oBAAoB,MAAM,WAAW;AACtE,UAAM,OAAO,YAAY,UAAU,aAAa,MAAM,aAAa,OAAO;AAC1E,SAAK,aAAa,yBAAyB,QAAQ;AACnD,WAAO,YAAY,YAAY,IAAI;AAAA,EACvC,GAAG,WAAW,CAAC,gBAAgB;AAC3B,eAAW,UAAU,SAAS;AAC1B,UAAI,kBAAkB,aAAa;AAC/B,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ,GAAG,IAAI,qBAAqB;AACxB,WAAO,mBAAmB;AAAA,EAC9B,EAAE,GAAI,QAAQ,sBAAsB,QAAQ,mBAAmB,aAAa,kBAAkB,CAAE;AACxG;AACA,SAAS,mBAAmB;AACxB,QAAM,OAAO,MAAM;AAAA,EAAE;AACrB,SAAO;AAAA,IACH,OAAO;AAAA,IACP,WAAW,OAAO,EAAE,IAAI,IAAI,SAAS,IAAI,KAAK,MAAM,SAAS,MAAM,MAAM;AAAA,IACzE,oBAAoB;AAAA,EACxB;AACJ;;;AChEA,IAAM,sBAAN,MAA0B;AAAA,EACtB,cAAc;AACV,SAAK,iBAAiB,oBAAI,IAAI;AAAA,EAClC;AAAA,EACA,MAAM,KAAK,KAAK;AACZ,WAAO,KAAK,eAAe,IAAI,GAAG;AAAA,EACtC;AAAA,EACA,MAAM,KAAK,KAAK,OAAO;AACnB,SAAK,eAAe,IAAI,KAAK,KAAK;AAAA,EACtC;AACJ;AACA,SAAS,mBAAmB,KAAK,KAAK;AAClC,UAAQ,KAAK;AAAA,IACT,KAAK,gCAAgC;AACjC,YAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,aAAO,uBAAuB,IAAI,IAC5B,OACA;AAAA,IACV;AAAA,IACA,KAAK;AACD,aAAO,WAAW,GAAG,IACf,MACA;AAAA,EACd;AACJ;;;AC1BA,IAAM,UAAU,KAAK,KAAK;AAC1B,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,UAAU,mBAAmB;AACrC,SAAK,WAAW;AAChB,SAAK,oBAAoB;AACzB,SAAK,eAAe,QAAQ,QAAQ;AACpC,SAAK,WAAW,CAAC;AAAA,EACrB;AAAA,EACA,IAAI,SAAS,MAAM;AACf,SAAK,SAAS,KAAK,EAAE,SAAS,KAAK,CAAC;AACpC,QAAI,YAAY,KAAK,SAAS,OAAO,CAAC,OAAO,EAAE,SAAAC,SAAQ,MAAM,QAAQ,oBAAoBA,QAAO,GAAG,CAAC;AACpG,WAAO,YAAY,KAAK,mBAAmB;AACvC,YAAMA,WAAU,KAAK,SAAS,MAAM;AACpC,UAAI,CAACA,UAAS;AACV;AAAA,MACJ;AACA,mBAAa,oBAAoBA,SAAQ,OAAO;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ;AACV,QAAI,KAAK,SAAS,WAAW;AACzB;AACJ,UAAM,WAAW,KAAK;AACtB,SAAK,WAAW,CAAC;AACjB,SAAK,eAAe,KAAK,aAAa,KAAK,YAAY;AACnD,iBAAW,EAAE,SAAS,KAAK,KAAK,UAAU;AAEtC,YAAI,KAAK,IAAI,KAAK,OAAO;AACrB;AACJ,YAAI;AACA,gBAAM,EAAE,MAAM,IAAI,MAAM,KAAK,SAAS,KAAK,OAAO;AAClD,kBAAQ,OAAO;AAAA,YACX,KAAK;AAAA,YACL,KAAK;AACD;AAAA,YACJ,KAAK;AACD,mBAAK,IAAI,SAAS,IAAI;AACtB;AAAA,YACJ;AACI;AAAA,UACR;AAAA,QACJ,SACO,KAAK;AAAA,QAAE;AAAA,MAClB;AAAA,IACJ,CAAC;AACD,UAAM,KAAK;AAAA,EACf;AACJ;AACA,SAAS,oBAAoB,SAAS;AAClC,MAAI,QAAQ;AACZ,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,cAAc,QAAQ,EAAE,GAAG;AACxD,UAAM,aAAa,QAAQ,KAAK,cAAc,CAAC,EAAE;AACjD,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AACxC,eAAS,WAAW,CAAC,EAAE,MAAM;AAAA,IACjC;AAAA,EACJ;AACA,SAAO;AACX;;;ACvDA,SAAS,+BAA+B,SAAS;AAC7C,QAAM,QAAQ,QAAQ,IAAI,8BAA8B;AACxD,MAAI,OAAO,UAAU,UAAU;AAC3B,WAAO;AAAA,EACX;AACA,QAAM,WAAW,OAAO,WAAW,KAAK;AACxC,MAAI,OAAO,MAAM,QAAQ,KAAK,WAAW,KAAK,WAAW,GAAG;AACxD,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACA,SAAS,2BAA2B,OAAO,OAAO,uBAAuB;AAMrE,MAAI,YAAY;AAChB,MAAI,uBAAuB;AACvB,0BAAsB,cAAc,WAAS;AACzC,kBAAY,UAAU;AAAA,IAC1B,CAAC;AAAA,EACL;AACA,SAAO,SAAS,qBAAqB,UAAU;AAC3C,WAAO;AAAA,MACH,MAAM,KAAK,SAAS;AAChB,cAAM,OAAO,KAAK,UAAU,QAAQ,IAAI;AACxC,gBAAQ,QAAQ,iBAAiB,IAAI,MAAM,KAAK,EAAE,YAAY;AAC9D,YAAI;AACA,gBAAM,WAAW,MAAM,MAAM,UAAU;AAAA,YACnC,QAAQ;AAAA,YACR;AAAA,YACA;AAAA,YACA,SAAS,QAAQ;AAAA,UACrB,CAAC;AACD,iBAAO;AAAA,YACH,OAAO,4BAA4B,SAAS,MAAM;AAAA,YAClD,qBAAqB,+BAA+B,SAAS,OAAO;AAAA,UACxE;AAAA,QACJ,SACO,KAAK;AACR,cAAI,KAAK,SAAS,KAAM;AACpB,mBAAO,EAAE,OAAO,kBAAkB;AAAA,UACtC;AACA,iBAAO,EAAE,OAAO,oBAAoB;AAAA,QACxC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACnDA,SAAS,8BAA8B,oBAAoB;AACvD,SAAO;AACX;AACA,SAAS,yBAAyB,OAAO;AACrC,SAAO,OAAO,UAAU;AAC5B;;;ACLA,IAAM,iBAAN,MAAqB;AAAA,EACjB,cAAc;AACV,SAAK,YAAY,CAAC;AAAA,EACtB;AAAA,EACA,QAAQ,eAAe;AACnB,SAAK,UAAU,KAAK,aAAa;AAAA,EACrC;AAAA,EACA,MAAM,SAAS;AACX,UAAM,UAAU,CAAC;AACjB,eAAW,iBAAiB,KAAK,WAAW;AACxC,YAAM,SAAS,cAAc,OAAO;AACpC,UAAI;AACA,gBAAQ,KAAK,MAAM;AAAA,IAC3B;AACA,WAAO;AAAA,MACH,cAAc,CAAC,eAAe;AAC1B,mBAAW,UAAU,SAAS;AAC1B,cAAI,UAAU,OAAO,cAAc;AAC/B,mBAAO,aAAa,UAAU;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,qBAAqB,QAAQ,IAAI,CAAC,WAAW;AACzC,YAAI,UAAU,OAAO,qBAAqB;AACtC,iBAAO,OAAO;AAAA,QAClB;AACA,eAAO;AAAA,MACX,CAAC,EAAE,OAAO,SAAS;AAAA,IACvB;AAAA,EACJ;AACJ;AACA,SAAS,UAAU,UAAU;AACzB,SAAO,aAAa;AACxB;;;ACjCA,SAAS,eAAe,KAAK,SAAS;AAElC,MAAI,IAAI,QAAQ,UAAU,MAAM,KAAK,IAAI,QAAQ,SAAS,MAAM;AAC5D,WAAO;AACX,MAAI;AACA,UAAM,cAAc,IAAI,IAAI,KAAK,OAAO,EAAE;AAE1C,QAAI,CAAC,IAAI,SAAS,GAAG,KAAK,YAAY,SAAS,GAAG,GAAG;AACjD,aAAO,YAAY,MAAM,GAAG,EAAE;AAAA,IAClC;AACA,WAAO;AAAA,EACX,SACO,IAAI;AAEP,WAAO;AAAA,EACX;AACJ;;;ACbA,SAAS,mBAAmBC,YAAW,OAAO,MAAM,SAAS;AACzD,QAAM,iBAAiB,UAAU,KAAK;AACtC,QAAM,MAAM,iBAAiB,MAAM,MAAM,OAAO,KAAK;AACrD,QAAM,SAAU,CAAC,CAAC,QAAQ,KAAK,UAAY,kBAAkB,MAAM,UAAW;AAC9E,SAAO,EAAE,KAAK,eAAe,KAAK,OAAO,GAAG,QAAQ,WAAAA,YAAW,MAAM,QAAQ;AACjF;AACA,SAAS,UAAU,OAAO;AACtB,SAAO,CAAC,CAAC,SAAS,OAAO,UAAU,YAAY,EAAE,iBAAiB;AACtE;AACA,SAAS,0BAA0B,QAAQ,OAAO;AAC9C,QAAM,iBAAiB,IAAI,eAAe;AAC1C,QAAM,gBAAgB,OAAO;AAC7B,SAAO,QAAQ,SAAS,MAAM,OAAO,MAAM;AACvC,UAAM,eAAe,mBAAmB,MAAM,IAAI,GAAG,OAAO,MAAM,OAAO,YAAY,OAAO,SAAS,OAAO;AAC5G,UAAM,EAAE,cAAc,oBAAoB,IAAI,eAAe,MAAM,YAAY;AAE/E,UAAM,cAAc,oBAAoB,MAAM,mBAAmB;AACjE,WAAO,cAAc,KAAK,MAAM,OAAO,WAAW,EAAE,KAAK,cAAY;AACjE,mBAAa,EAAE,QAAQ,SAAS,QAAQ,SAAS,MAAM,IAAI,GAAG,OAAO,UAAU,CAAC;AAChF,aAAO;AAAA,IACX,CAAC,EAAE,MAAM,WAAS;AACd,mBAAa,EAAE,OAAO,SAAS,MAAM,IAAI,GAAG,OAAO,QAAQ,CAAC;AAC5D,YAAM;AAAA,IACV,CAAC;AAAA,EACL;AACA,SAAO;AACX;AACA,SAAS,oBAAoB,MAAM,qBAAqB;AACpD,MAAI,CAAC;AACD,WAAO;AACX,QAAM,eAAe,CAAC;AACtB,aAAW,KAAK,qBAAqB;AACjC,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,CAAC,GAAG;AAC3C,mBAAa,IAAI,IAAI;AAAA,IACzB;AAAA,EACJ;AACA,SAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,IAAI,GAAG,EAAE,SAAS,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,YAAY,GAAG,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,OAAO,EAAE,CAAC;AACvK;;;ACrCA,SAAS,4BAA4B,KAAK,OAAOC,WAAU;AACvD,QAAM,iBAAiB,IAAI,eAAe;AAC1C,QAAM,kBAAkB,oBAAI,QAAQ;AACpC,QAAM,kBAAkB,oBAAI,QAAQ;AACpC,QAAM,eAAe,IAAI,UAAU;AACnC,MAAI,UAAU,OAAO,SAAS,KAAK,QAAQ,QAAQ,MAAM;AACrD,oBAAgB,IAAI,MAAM,EAAE,QAAQ,KAAK,eAAe,OAAO,GAAG,GAAGA,aAAYA,UAAS,OAAO,EAAE,CAAC;AAEpG,iBAAa,KAAK,MAAM,QAAQ,KAAK,GAAG,IAAI;AAAA,EAChD;AACA,QAAM,eAAe,IAAI,UAAU;AACnC,MAAI,UAAU,OAAO,SAAS,KAAK,MAAM;AACrC,UAAM,cAAc,gBAAgB,IAAI,IAAI;AAC5C,QAAI,aAAa;AAGb,YAAM,kBAAkB,gBAAgB,IAAI,IAAI;AAChD,UAAI;AACA,aAAK,oBAAoB,oBAAoB,eAAe;AAChE,YAAM,EAAE,cAAc,oBAAoB,IAAI,eAAe,MAAM;AAAA,QAC/D,MAAM;AAAA,QACN,QAAQ,YAAY;AAAA,QACpB,KAAK,YAAY;AAAA,QACjB,WAAW,MAAM,IAAI;AAAA,MACzB,CAAC;AACD,UAAI,qBAAqB;AACrB,mBAAW,gBAAgB,qBAAqB;AAC5C,qBAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,YAAY,GAAG;AACtD,iBAAK,iBAAiB,MAAM,KAAK;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,qBAAqB,CAAC,QAAQ;AAChC,YAAI,KAAK,eAAe,IAAI,QAAQ,cAAc;AAE9C,gBAAM,aAAa,KAAK,SAAS,IAC3B,EAAE,SAAS,MAAM,IAAI,GAAG,QAAQ,KAAK,QAAQ,OAAO,UAAU,IAC9D,EAAE,SAAS,MAAM,IAAI,GAAG,OAAO,QAAQ;AAC7C,uBAAa,UAAU;AAAA,QAC3B;AAAA,MACJ;AACA,WAAK,iBAAiB,oBAAoB,kBAAkB;AAC5D,sBAAgB,IAAI,MAAM,kBAAkB;AAAA,IAChD;AACA,iBAAa,KAAK,MAAM,IAAI;AAAA,EAChC;AACA,SAAO;AACX;;;AChDA,IAAM,4BAA4B;AAAA,EAC9B,UAAU;AAAA,EACV,OAAO;AAAA,EACP,KAAK;AACT;AACA,SAAS,uBAAuB,oBAAoB;AAChD,SAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,yBAAyB,GAAG,kBAAkB;AACzF;AACA,SAAS,qBAAqB,KAAK;AAC/B,QAAM,eAAe,CAAC,aAAa,SAAS;AAC5C,QAAM,OAAO,OAAO,KAAK,yBAAyB;AAClD,SAAO,SAAS,GAAG,KAAK,KAAK,MAAM,SAAO,aAAa,SAAS,OAAO,IAAI,GAAG,CAAC,CAAC;AACpF;;;ACdA,SAAS,eAAeC,YAAW,SAAS;AACxC,SAAQA,eAAc,UAAa,YAAY,UAC1CA,eAAc,KAAK,YAAY;AACxC;AACA,IAAM,+BAA+B,CAAC,aAAaC,cAAa,OAAOC,mBAAkB;AACrF,WAAS,wBAAwB,OAAOF,YAAW,SAAS;AACxD,QAAI,eAAeA,YAAW,OAAO;AACjC;AACJ,UAAM,OAAO,YAAY,UAAU,kBAAkB,KAAK,IAAI,KAAK,IAAI;AAAA,MACnE,WAAAA;AAAA,MACA,eAAAE;AAAA,MACA,oBAAoB;AAAA,IACxB,CAAC;AACD,SAAK,aAAa,yBAAyB,iBAAiB;AAC5D,SAAK,aAAa,iBAAiB,KAAK;AACxC,gBAAY,QAAQ,MAAM,OAAO;AAAA,EACrC;AACA,QAAM,UAAUD,aAAY,iBAAiB,YAAY;AACzD,QAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,QAAQ,CAAC;AACjD,MAAI,OAAO;AACP,4BAAwB,UAAU,MAAM,kBAAkB,MAAM,cAAc;AAC9E,4BAAwB,YAAY,MAAM,eAAe,MAAM,WAAW;AAC1E,4BAAwB,iBAAiB,MAAM,YAAY,MAAM,iBAAiB;AAClF,4BAAwB,aAAa,MAAM,mBAAmB,MAAM,eAAe;AAEnF,UAAM,kBAAkB,MAAM,yBAAyB,MAAM;AAC7D,4BAAwB,gBAAgB,MAAM,cAAc,eAAe;AAC3E,4BAAwB,OAAO,MAAM,uBAAuB,MAAM,UAAU;AAC5E,4BAAwB,eAAe,MAAM,cAAc,MAAM,aAAa;AAC9E,4BAAwB,gBAAgB,MAAM,eAAe,MAAM,WAAW;AAC9E,4BAAwB,yBAAyB,MAAM,4BAA4B,MAAM,wBAAwB;AACjH,4BAAwB,aAAa,MAAM,gBAAgB,MAAM,YAAY;AAAA,EACjF;AACJ;;;AC/BA,IAAM,uBAAuB,CAAC,QAAQ,IAAI,YAAY;AACtD,IAAM,4BAA4B,MAAM;AACpC,SAAO,MAAM,oBAAoB;AAAA,IAC7B,YAAY,eAAe,sBAAsB;AAC7C,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,sBAAsB,sBAAsB;AAAA,IAAE;AAAA,EAClD;AACJ;AACA,IAAM,+BAA+B,CAACE,WAAU,aAAa;AACzD,SAAO,MAAM,uBAAuB;AAAA,IAChC,YAAY,eAAe,sBAAsB;AAC7C,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,sBAAsB,sBAAsB;AACxC,uBAAiB,YAAY,CAAC,OAAO;AACjC,cAAM,MAAM,IAAI,IAAI,SAAS,IAAI;AACjC,cAAM,OAAO,qBAAqB,KAAK,UAAU;AACjD,QAAAA,UAAS,CAAC,YAAY;AAClB,eAAK,IAAI,OAAO;AAAA,QACpB,CAAC;AAAA,MACL,CAAC;AACD,YAAM,oBAAoB,QAAQ;AAClC,cAAQ,YAAY,YAAa,MAAM;AACnC,cAAM,MAAM,KAAK,CAAC;AAClB,YAAI,KAAK;AACL,gBAAM,cAAc,IAAI,IAAI,eAAe,IAAI,SAAS,GAAG,SAAS,OAAO,CAAC;AAC5E,gBAAM,OAAO,qBAAqB,aAAa,WAAW;AAC1D,UAAAA,UAAS,CAAC,YAAY;AAClB,iBAAK,IAAI,OAAO;AAAA,UACpB,CAAC;AAAA,QACL;AACA,0BAAkB,MAAM,MAAM,IAAI;AAAA,MACtC;AAAA,IACJ;AAAA,EACJ;AACJ;;;AClCA,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAYC,WAAU,UAAU,aAAa,WAAWC,WAAU,uBAAuBC,cAAa;AAGlG,SAAK,kBAAkB;AACvB,SAAK,WAAWF;AAChB,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,YAAY;AACjB,SAAK,WAAWC;AAChB,SAAK,cAAcC;AACnB,0BAAsB,cAAc,WAAS;AACzC,UAAI,CAAC,KAAK,mBAAmB,UAAU,iBAAiB;AACpD,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,eAAe;AAGrB,QAAI,CAAC,cAAc,+BAA+B,KAAK,iBAAiB;AACpE;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,YAAY,UAAU,kBAAkB,EAAE,WAAW,GAAG,eAAe,KAAK,CAAC;AAC/F,UAAM,sBAAsB,uBAAuB,cAAc,kBAAkB;AACnF,UAAM,MAAM,IAAI,IAAI,KAAK,SAAS,IAAI;AACtC,SAAK,SAAS,CAAC,YAAY;AACvB,UAAI,KAAK;AACL;AAIJ,YAAM,QAAQ,cAAc,gBAAgB,aAAa,GAAG,KAAK,qBAAqB,GAAG;AACzF,WAAK,QAAQ;AACb,mCAA6B,KAAK,aAAa,KAAK,aAAa,OAAO,IAAI;AAE5E,WAAK,aAAa,yBAAyB,gBAAgB;AAC3D,WAAK,aAAa,8BAA8B,KAAK;AACrD,UAAI,oBAAoB;AACpB,aAAK,aAAa,iCAAiC,KAAK,SAAS,QAAQ;AAC7E,UAAI,oBAAoB;AACpB,aAAK,aAAa,8BAA8B,KAAK,SAAS,KAAK;AACvE,UAAI,oBAAoB;AACpB,aAAK,aAAa,4BAA4B,IAAI,SAAS,CAAC;AAChE,WAAK,UAAU,SAAS,IAAI;AAC5B,WAAK,YAAY,QAAQ,MAAM,OAAO;AAAA,IAC1C,CAAC;AAAA,EACL;AACJ;;;AClDA,IAAM,oBAAoB,CAAC,WAAW,YAAY,KAAK,MAAM,KAAK;AAClE,IAAM,uBAAN,MAA2B;AAAA,EACvB,YAAY,aAAa,oBAAoB,cAAc,YAAY;AACnE,SAAK,cAAc;AACnB,SAAK,qBAAqB;AAC1B,SAAK,eAAe;AACpB,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,yBAAyB;AAC9B,SAAK,SAAS,EAAE,OAAO,QAAQ,OAAO,MAAM,QAAQ,MAAM,MAAM,QAAQ,MAAM,OAAO,QAAQ,MAAM;AACnG,SAAK,eAAe,CAAC,iBAAiB;AAClC,UAAI,CAAC,KAAK,mBAAmB,YAAY;AACrC;AACJ,YAAM,uCAAuC;AAC7C,YAAM,qBAAqB;AAAA,QACvB,KAAK,aAAa;AAAA,QAClB,MAAM,aAAa;AAAA,QACnB,uBAAuB;AAAA,MAC3B;AACA,YAAM,qBAAqB,KAAK,uBAAuB,kBAAkB;AAEzE,UAAI,CAAC,oBAAoB;AACrB,eAAO;AAAA,UACH,cAAc;AAAA,UACd,qBAAqB;AAAA,QACzB;AAAA,MACJ;AACA,UAAI,mBAAmB,0BAA0B,QAAW;AACxD,2BAAmB,wBAAwB;AAAA,MAC/C;AAEA,UAAI,CAAC,mBAAmB,KAAK;AACzB,eAAO;AAAA,UACH,cAAc;AAAA;AAAA,UAEd,qBAAqB,mBAAmB,wBAAwB,KAAK,uBAAuB,IAAI;AAAA,QACpG;AAAA,MACJ;AAEA,UAAI,OAAO,mBAAmB,QAAQ,UAAU;AAC5C,aAAK,OAAO,KAAK,uEAAuE,OAAO,mBAAmB,GAAG,EAAE;AACvH;AAAA,MACJ;AACA,YAAM,OAAO,KAAK,YAAY,UAAU,UAAU,aAAa,OAAO,YAAY,CAAC,IAAI,EAAE,WAAW,aAAa,WAAW,oBAAoB,MAAM,CAAC;AACvJ,WAAK,aAAa,yBAAyB,SAAS;AACpD,WAAK,aAAa,eAAe,aAAa,MAAM;AACpD,WAAK,aAAa,YAAY,mBAAmB,GAAG;AACpD,aAAO;AAAA,QACH,cAAc,CAAC,eAAe;AAC1B,cAAI,WAAW,UAAU,WAAW;AAChC,iBAAK,aAAa,oBAAoB,WAAW,MAAM;AACvD,iBAAK,YAAY,QAAQ,MAAM,WAAW,OAAO;AAAA,UACrD;AAAA,QACJ;AAAA;AAAA,QAEA,qBAAqB,mBAAmB,wBAClC,KAAK,uBAAuB,IAAI,IAChC;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,UAAU,eAAe;AACrB,SAAK,SAAS,cAAc;AAC5B,QAAI,cAAc,+BAA+B;AAC7C,WAAK,iBAAiB,cAAc;AACpC,WAAK,WAAW,QAAQ,KAAK,YAAY;AACzC,WAAK,aAAa,QAAQ,KAAK,YAAY;AAC3C,WAAK,yBAAyB,cAAc;AAAA,IAChD;AAAA,EACJ;AAAA,EACA,mBAAmB,cAAc;AAC7B,WAAO,aAAa,QAAQ,KAAK,kBAAkB,kBAAkB,KAAK,CAAC,WAAW,aAAa,IAAI,WAAW,MAAM,CAAC;AAAA,EAC7H;AAAA,EACA,uBAAuB,MAAM;AACzB,UAAM,sBAAsB,CAAC;AAC7B,QAAI,MAAM;AACN,YAAM,UAAU,KAAK;AACrB,YAAM,eAAe,KAAK;AAC1B,YAAM,UAAU,KAAK,YAAY,QAAQ,aAAa,KAAK,YAAY;AACvE,0BAAoB,cAAc,uBAAuB,SAAS,cAAc,OAAO;AAAA,IAC3F,WACS,KAAK,mBAAmB,SAAS;AACtC,YAAM,qBAAqB,KAAK,mBAAmB;AACnD,YAAM,UAAU,mBAAmB;AACnC,YAAM,eAAe,mBAAmB;AACxC,YAAM,UAAU,KAAK,YAAY,QAAQ,aAAa,mBAAmB,YAAY;AACrF,0BAAoB,cAAc,uBAAuB,SAAS,cAAc,OAAO;AAAA,IAC3F;AACA,WAAO;AAAA,EACX;AACJ;AACA,SAAS,uBAAuB,SAAS,cAAc,SAAS;AAC5D,SAAO,MAAM,OAAO,IAAI,YAAY,IAAI,UAAU,OAAO,IAAI;AACjE;;;AC/FA,SAAS,eAAe,UAAU;AAC9B,UAAQ,UAAU;AAAA,IACd,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;AACA,SAAS,sBAAsB,0BAA0B;AACrD,SAAO,4BACH,MAAM,QAAQ,yBAAyB,mBAAmB,KAC1D,yBAAyB,oBAAoB,SAAS,UAAU;AACxE;AACA,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAY,aAAa,oBAAoB,0BAA0B;AACnE,SAAK,cAAc;AACnB,SAAK,qBAAqB;AAC1B,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,UAAU,eAAe;AACrB,QAAI,CAAC,sBAAsB,KAAK,wBAAwB;AACpD;AACJ,UAAM,WAAW,IAAI,KAAK,yBAAyB,CAAC,SAAS;AACzD,YAAM,UAAU,KAAK,WAAW;AAChC,iBAAW,SAAS,SAAS;AACzB,YAAI,MAAM,kBAAkB,WAAW,MAAM,kBAAkB,kBAAkB;AAC7E;AAAA,QACJ;AACA,cAAMC,iBAAgB,KAAK,mBAAmB;AAC9C,YAAIA,gBAAe;AACf,gBAAM,qBAAqB,cAAc,uBAAuB,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,cAAc,CAAC;AAC9G,cAAI,CAAC;AACD;AACJ,cAAI,OAAO,mBAAmB,QAAQ,UAAU;AAC5C,0BAAc,OAAO,KAAK,uEAAuE,OAAO,mBAAmB,GAAG,EAAE;AAChI;AAAA,UACJ;AACA,cAAI,OAAO;AACX,cAAI;AACA,kBAAM,MAAM,IAAI,IAAI,mBAAmB,GAAG;AAC1C,gBAAI,SAAS;AACb,mBAAO,IAAI;AAAA,UACf,SACO,KAAK;AACR,0BAAc,OAAO,KAAK,6DAA6D,mBAAmB,GAAG,EAAE;AAC/G;AAAA,UACJ;AACA,gBAAM,OAAO,KAAK,YAAY,UAAU,iBAAiB,IAAI,IAAI;AAAA,YAC7D,eAAAA;AAAA,YACA,WAAW,MAAM;AAAA,YACjB,oBAAoB;AAAA,UACxB,CAAC;AACD,eAAK,aAAa,yBAAyB,eAAe;AAC1D,eAAK,aAAa,YAAY,mBAAmB,GAAG;AACpD,gBAAM,aAAa,eAAe,MAAM,eAAe;AACvD,cAAI,YAAY;AACZ,iBAAK,aAAa,eAAe,UAAU;AAAA,UAC/C;AACA,cAAI,MAAM,mBAAmB,MAAM,iBAAiB;AAChD,iBAAK,aAAa,gCAAgC,MAAM,eAAe;AACvE,iBAAK,aAAa,6CAA6C,MAAM,eAAe;AAAA,UACxF;AACA,cAAI,MAAM,gBAAgB;AACtB,iBAAK,aAAa,oBAAoB,MAAM,cAAc;AAAA,UAC9D;AACA,eAAK,YAAY,QAAQ,MAAM,MAAM,WAAW;AAAA,QACpD;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,QAAI;AACA,eAAS,QAAQ,EAAE,MAAM,YAAY,UAAU,KAAK,CAAC;AAAA,IACzD,SACO,KAAK;AACR,oBAAc,OAAO,KAAK,0HAA0H;AACpJ,eAAS,QAAQ,EAAE,YAAY,CAAC,UAAU,EAAE,CAAC;AAAA,IACjD;AAAA,EACJ;AACJ;;;ACrFA,IAAM,EAAE,WAAW,eAAe,mBAAmB,IAAI;AACzD,IAAM,8BAA8B;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS;AAAA,IACL,iBAAiB,CAAC,UAAU,OAAO,KAAK;AAAA,IACxC,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AACJ;AACA,IAAM,oBAAN,MAAwB;AAAA,EACpB,YAAY,aAAa,UAAUC,WAAU;AACzC,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,WAAWA;AAAA,EACpB;AAAA,EACA,UAAU,eAAe;AACrB,QAAI,CAAC,cAAc;AACf;AACJ,UAAM,cAAc,IAAI,IAAI,KAAK,SAAS,IAAI;AAC9C,QAAI,gBAAgB,cAAc,gBAAgB,aAAa,WAAW,KAAK,qBAAqB,WAAW;AAC/G,UAAM,sBAAsB,uBAAuB,cAAc,kBAAkB;AACnF,kBAAc,gBAAgB,sBAAsB,CAAC,KAAK,SAAS,YAAY;AAC3E,UAAI;AACJ,UAAI,eAAe,KAAK;AACpB,sBAAc;AAAA,MAClB,OACK;AACD,YAAI;AACA,gBAAM,YAAY,OAAO,GAAG;AAC5B,wBAAc,IAAI,IAAI,SAAS;AAAA,QACnC,SACO,KAAK;AACR,wBAAc,OAAO,KAAK,+CAA+C;AACzE,iBAAO;AAAA,YACH,IAAI;AAAA,YACJ,SAAS;AAAA,YACT,cAAc;AAAA,YACd,SAAS,MAAM;AAAA,YACf,KAAK,MAAM;AAAA,YAAE;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,yBAAyB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,GAAG,EAAE,QAAQ,CAAC;AACpF,YAAM,eAAe,KAAK,YAAY,oBAAoB,iBAAiB,wBAAwB,2BAA2B;AAC9H,YAAM,QAAQ,cAAc,gBAAgB,aAAa,WAAW,KAAK,qBAAqB,WAAW;AAEzG,mBAAa,QAAQ;AACrB,YAAM,OAAO,KAAK,YAAY,UAAU,aAAa,MAAM,aAAa,OAAO;AAC/E,WAAK,aAAa,yBAAyB,cAAc;AACzD,WAAK,aAAa,8BAA8B,KAAK;AACrD,WAAK,aAAa,uCAAuC,aAAa;AACtE,WAAK,aAAa,6CAA6C,aAAa,QAAQ,OAAO;AAC3F,UAAI,oBAAoB;AACpB,aAAK,aAAa,4BAA4B,IAAI,SAAS,CAAC;AAChE,sBAAgB;AAChB,aAAO;AAAA,QACH,IAAI,KAAK;AAAA,QACT,SAAS,KAAK;AAAA,QACd,SAAS,KAAK;AAAA,QACd,cAAc,KAAK;AAAA,QACnB,KAAK,CAAC,qBAAqB;AACvB,gBAAMC,WAAU,SAAS,gBAAgB,IAAI,mBAAmB,EAAE,SAAS,iBAAiB;AAC5F,cAAI,oBAAoB,OAAO;AAC3B,iBAAK,aAAa,8BAA8B,KAAK,SAAS,KAAK;AAAA,UACvE;AACA,cAAIA,SAAQ,KAAK;AACb,kBAAM,YAAY,UAAUA,SAAQ,GAAG;AACvC,kBAAMC,SAAQ,cAAc,gBAAgB,aAAa,SAAS,KAAK,qBAAqB,SAAS;AACrG,iBAAK,OAAO,gBAAgBA,MAAK;AACjC,iBAAK,aAAa,8BAA8BA,MAAK;AACrD,4BAAgBA;AAEhB,gBAAI,oBAAoB,KAAK;AACzB,mBAAK,aAAa,4BAA4B,UAAU,SAAS,CAAC;AAAA,YACtE;AAAA,UACJ;AACA,eAAK,YAAY,YAAY,IAAI,EAAE,IAAID,SAAQ,OAAO;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACA,SAAS,UAAU,KAAK;AACpB,MAAI,OAAO,QAAQ,UAAU;AACzB,WAAO,IAAI,IAAI,GAAG;AAAA,EACtB;AACA,SAAO;AACX;;;AC/FA,SAAS,mCAAmCE,SAAQ;AAChD,QAAM,YAAY,CAAC;AACnB,MAAI,QAAQA,QAAO,SAAS,oBAAoB,WAC1C,kBACA;AACN,QAAM,wBAAwB;AAAA,IAC1B,cAAc,+BAA+B;AACzC,gBAAU,KAAK,6BAA6B;AAE5C,UAAI,UAAU,iBAAiB;AAC3B,sCAA8B,KAAK;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,yBAAyB,CAAC,aAAa;AACzC,QAAI,UAAU;AACV;AACJ,YAAQ;AACR,eAAW,YAAY,WAAW;AAC9B,eAAS,KAAK;AAAA,IAClB;AAAA,EACJ;AACA,EAAAA,QAAO,SAAS,iBAAiB,oBAAoB,WAAY;AAC7D,UAAM,WAAWA,QAAO,SAAS,oBAAoB,WAC/C,kBACA;AACN,2BAAuB,QAAQ;AAAA,EACnC,CAAC;AAGD,EAAAA,QAAO,iBAAiB,YAAY,WAAY;AAC5C,2BAAuB,eAAe;AAAA,EAC1C,CAAC;AACD,EAAAA,QAAO,iBAAiB,YAAY,WAAY;AAC5C,2BAAuB,eAAe;AAAA,EAC1C,CAAC;AACD,SAAO;AACX;;;AClCA,IAAM,qBAAqB;AAC3B,SAAS,sBAAsB,YAAYC,cAAa;AAIpD,MAAI,KAAK,IAAI,KAAK,IAAI,KAAK,aAAaA,aAAY,IAAI,EAAE,IAAI,oBAAoB;AAC9E,WAAO,KAAK,IAAI,IAAIA,aAAY,IAAI;AAAA,EACxC;AACA,SAAO;AACX;AACA,SAAS,YAAYA,cAAa,uBAAuB;AACrD,QAAM,oBAAoBA,aAAY,eAAe,SAC/CA,aAAY,OAAO,kBACnBA,aAAY;AAIlB,MAAI,uBAAuB,sBAAsB,mBAAmBA,YAAW;AAC/E,wBAAsB,cAAc,WAAS;AACzC,QAAI,UAAU,iBAAiB;AAC3B,6BAAuB,sBAAsB,sBAAsBA,YAAW;AAAA,IAClF;AAAA,EACJ,CAAC;AACD,SAAO;AAAA,IACH,KAAK,MAAMA,aAAY,IAAI;AAAA,IAC3B,MAAM,MAAM,IAAI,KAAK,uBAAuBA,aAAY,IAAI,CAAC;AAAA,IAC7D,SAAS,CAAC,SAAS,KAAK,QAAQ,IAAI;AAAA;AAAA,IAEpC,4BAA4B,CAAC,SAAS,0BAA0B,uBAAuB,IAAI,EAAE,SAAS;AAAA,EAC1G;AACJ;;;AC/BA,IAAM,oBAAoB,CAAC,UAAU,SAAS,KAAK,KAC/C,OAAO,MAAM,iBAAiB,cAC9B,OAAO,MAAM,0BAA0B;;;ACC3C,SAAS,aAAa,UAAU,wBAAwB;AACpD,SAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,GAAG,EAAE,cAAc,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,YAAY,GAAG,EAAE,cAAc,aAAa,cAAc,gBAAgB,aAAa,CAAC,GAAG,6BAA6B;AAAA,IACvN,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,+BAA+B;AAAA,IAC9B,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,4BAA4B;AAAA,IAC3B,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,qBAAqB;AAAA,IACpB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,iBAAiB;AAAA,IAChB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,kBAAkB;AAAA,IACjB,cAAc,CAAC;AAAA,IACf,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,wBAAwB;AAAA,IACvB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,GAAG,oBAAoB;AAAA,IACnB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,UAAU;AAAA,EACd,EAAE,CAAC;AACX;;;ACvCA,SAAS,MAAM,OAAO;AAClB,QAAM,MAAM,MAAM,SAAS,EAAE;AAE7B,MAAI,IAAI,WAAW,GAAG;AAClB,WAAO,MAAM;AAAA,EACjB;AACA,SAAO;AACX;AACA,IAAM,cAAc;AAAA,EAChB,SAAS,MAAM;AACX,UAAM,QAAQ,IAAI,WAAW,OAAO,CAAC;AAGrC,UAAM,eAAe,OAAO,OAAO,gBAAgB,KAAK;AACxD,WAAO,MAAM,KAAK,cAAc,KAAK,EAAE,KAAK,EAAE;AAAA,EAClD;AACJ;;;AChBA,IAAM,UAAN,MAAc;AAAA,EACV,YAAY,OAAO;AACf,SAAK,UAAU;AACf,SAAK,YAAY,oBAAI,IAAI;AACzB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,UAAU,UAAU;AAChB,SAAK,UAAU,IAAI,QAAQ;AAE3B,QAAI,KAAK,UAAU,GAAG;AAClB,eAAS,KAAK,MAAM,IAAI,CAAC;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,YAAY,UAAU;AAClB,SAAK,UAAU,OAAO,QAAQ;AAAA,EAClC;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,OAAO,aAAa;AAChB,SAAK,UAAU;AACf,eAAW,YAAY,KAAK,WAAW;AACnC,eAAS,WAAW;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACvBA,IAAM,qBAAN,cAAiC,QAAQ;AAAA,EACrC,YAAY,OAAO,QAAQ;AACvB,UAAM,KAAK;AACX,SAAK,UAAU;AACf,UAAM,WAAW,IAAI,iBAAiB,MAAM;AAAE,WAAK,QAAQ;AAAA,IAAG,CAAC;AAC/D,aAAS,QAAQ,QAAQ;AAAA,MACrB,SAAS;AAAA,MACT,WAAW;AAAA,MACX,eAAe;AAAA;AAAA;AAAA,IAGnB,CAAC;AACD,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,UAAU;AACN,iBAAa,KAAK,OAAO;AACzB,SAAK,UAAU;AAIf,UAAM,cAAc,KAAK,MAAM,IAAI;AACnC,SAAK,UAAU,WAAW,MAAM;AAAE,WAAK,OAAO,WAAW;AAAA,IAAG,GAAG,GAAG;AAAA,EACtE;AACJ;;;ACtBA,SAAS,8BAA8B,OAAO;AAC1C,SAAO,CAAC,CAAC,SAAS,MAAM,cAAc;AAC1C;AACA,IAAM,sBAAN,cAAkC,QAAQ;AAAA,EACtC,YAAY,OAAOC,mBAAkBC,cAAaC,WAAU;AACxD,UAAM,KAAK;AAIX,QAAIA,UAAS,eAAe,YAAY;AACpC,iBAAW,MAAM;AAAE,aAAK,uBAAuBD,YAAW;AAAA,MAAG,GAAG,CAAC;AAAA,IACrE,OACK;AACD,MAAAD,kBAAiB,QAAQ,MAAM;AAC3B,mBAAW,MAAM;AAAE,eAAK,uBAAuBC,YAAW;AAAA,QAAG,GAAG,CAAC;AAAA,MACrE,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,uBAAuBA,cAAa;AAChC,UAAM,MAAM,KAAK,MAAM,IAAI;AAG3B,UAAM,QAAQ,OAAOA,aAAY,qBAAqB,aAAaA,aAAY,iBAAiB,YAAY,EAAE,CAAC,IAAI;AACnH,QAAI,cAAc;AAClB,QAAI,8BAA8B,KAAK,GAAG;AACtC,oBAAc,MAAM;AAAA,IACxB,WACSA,aAAY,QAAQ;AACzB,oBAAcA,aAAY,OAAO,eAAeA,aAAY,OAAO;AAAA,IACvE;AAIA,QAAI,eAAe,KAAK,cAAc,KAAK;AACvC,oBAAc;AAAA,IAClB;AACA,SAAK,OAAO,WAAW;AAAA,EAC3B;AACJ;;;ACvCA,IAAM,iBAAN,cAA6B,QAAQ;AAAA,EACjC,YAAY,OAAO,gBAAgB;AAC/B,UAAM,KAAK;AACX,SAAK,UAAU;AACf,SAAK,eAAe,CAAC;AACrB,SAAK,sBAAsB;AAK3B,SAAK,UAAU;AACf,mBAAe,QAAQ,KAAK,eAAe,KAAK,IAAI,CAAC;AAAA,EACzD;AAAA,EACA,gBAAgB,cAAc;AAC1B,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,eAAe,cAAc;AAEzB,QAAI,KAAK,gBAAgB,aAAa,GAAG;AACrC;AACJ,iBAAa,KAAK,OAAO;AACzB,SAAK,UAAU;AACf,MAAE,KAAK;AACP,WAAO;AAAA,MACH,cAAc,CAAC,eAAe;AAC1B,YAAI,EAAE,KAAK,wBAAwB,GAAG;AAIlC,gBAAM,cAAc,KAAK,MAAM,IAAI;AACnC,eAAK,UAAU,WAAW,MAAM;AAAE,iBAAK,OAAO,WAAW;AAAA,UAAG,GAAG,GAAG;AAAA,QACtE;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB,KAAK;AACjB,WAAO,KAAK,aAAa,KAAK,YAAU,OAAO,KAAK,GAAG,CAAC;AAAA,EAC5D;AACJ;;;AClCA,IAAM,mBAAN,cAA+B,QAAQ;AAAA,EACnC,YAAY,OAAO,UAAU;AACzB,UAAM,KAAK;AACX,SAAK,WAAW;AAChB,eAAW,WAAW,UAAU;AAC5B,cAAQ,UAAU,CAAC,gBAAgB;AAG/B,YAAI,KAAK,mBAAmB,GAAG;AAC3B,eAAK,OAAO,WAAW;AAAA,QAC3B,OACK;AACD,eAAK,UAAU;AAAA,QACnB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,YAAY;AAGR,WAAO,MAAM,UAAU,KAAK,KAAK,mBAAmB;AAAA,EACxD;AAAA,EACA,qBAAqB;AACjB,eAAW,WAAW,KAAK,UAAU;AACjC,UAAI,CAAC,QAAQ,UAAU,GAAG;AACtB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AC/BA,IAAM,uBAAuB,KAAK;AAClC,SAAS,qBAAqB;AAC1B,QAAM,OAAO,MAAM;AAAA,EAAE;AACrB,OAAK,YAAY,MAAM;AAAA,EAAE;AACzB,SAAO;AACX;AACA,SAAS,eAAe,OAAOE,SAAQ,qBAAqB,mBAAmBC,cAAa;AACxF,QAAM,qBAAqB,IAAI,mBAAmB,OAAOD,QAAO,QAAQ;AACxE,QAAM,sBAAsB,IAAI,eAAe,OAAO,mBAAmB;AACzE,QAAM,oBAAoB,IAAI,eAAe,OAAO,iBAAiB;AACrE,QAAM,sBAAsB,IAAI,oBAAoB,OAAOA,QAAO,kBAAkBC,cAAaD,QAAO,QAAQ;AAChH,QAAM,UAAU,IAAI,iBAAiB,OAAO;AAAA,IACxC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACD,WAAS,eAAe,UAAU;AAC9B,UAAME,YAAW,CAACC,iBAAgB;AAC9B,mBAAa,OAAO;AAGpB,cAAQ,YAAYD,SAAQ;AAC5B,eAASC,YAAW;AAAA,IACxB;AACA,UAAM,UAAU,WAAW,MAAM;AAC7B,YAAMA,eAAc,MAAM,IAAI;AAC9B,cAAQ,YAAYD,SAAQ;AAC5B,eAASC,YAAW;AAAA,IACxB,GAAG,oBAAoB;AAKvB,UAAM,WAAW,QAAQ,UAAU,IAAI,MAAM;AAC7C,UAAM,cAAc,MAAM,IAAI;AAC9B,eAAW,MAAM;AACb,UAAI,QAAQ,UAAU,GAAG;AAErB,QAAAD,UAAS,WAAW;AAAA,MACxB,OACK;AAED,gBAAQ,UAAUA,SAAQ;AAAA,MAC9B;AAAA,IACJ,GAAG,QAAQ;AAAA,EACf;AACA,iBAAe,YAAY,SAAU,eAAe;AAChD,UAAM,mBAAmB,cAAc,iBAAiB,IAAI,CAAC,QAAQ,OAAO,QAAQ,WAAW,OAAO,GAAG,IAAI,GAAG,EAAE,OAAO,OAAO,cAAc,QAAQ,CAAC;AACvJ,wBAAoB,gBAAgB,gBAAgB;AACpD,sBAAkB,gBAAgB,gBAAgB;AAAA,EACtD;AACA,SAAO;AACX;;;ACxDA,SAAS,uBAAuBE,SAAQ;AAGpC,MAAI;AACA,QAAIA,QAAO,cAAc;AACrB,aAAO,IAAI,mBAAmBA,QAAO,YAAY;AAAA,IACrD;AAAA,EACJ,SACO,IAAI;AAAA,EAAE;AAEb,SAAO,IAAI,oBAAoB;AACnC;AACA,SAAS,SAAS,KAAK,OAAO;AAC1B,UAAQ,KAAK;AAAA,IACT,KAAK;AACD,aAAO,KAAK,UAAU,KAAK;AAAA,IAC/B,KAAK;AACD,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;AACA,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAY,cAAc;AACtB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,MAAM,KAAK,KAAK;AACZ,QAAI;AACA,YAAM,MAAM,KAAK,QAAQ,QAAQ,GAAG;AACpC,UAAI,KAAK;AACL,eAAO,mBAAmB,KAAK,GAAG;AAAA,MACtC;AAAA,IACJ,SACO,IAAI;AAAA,IAAE;AAAA,EACjB;AAAA,EACA,MAAM,KAAK,KAAK,OAAO;AACnB,QAAI;AACA,WAAK,QAAQ,QAAQ,KAAK,SAAS,KAAK,KAAK,CAAC;AAAA,IAClD,SACO,IAAI;AAAA,IAAE;AAAA,EACjB;AACJ;;;AC3CA,kBAAiB;AAGjB,SAAS,+BAA+BC,YAAW,aAAa;AAC5D,MAAI;AACJ,MAAI;AACJ,SAAO,SAAS,yBAAyB,QAAQ;AAC7C,UAAM,aAAa,IAAI,mBAAmB,OAAO,cAAc,OAAO,YAAY,+BAA+B,OAAO;AACxH,eAAW,IAAI,sBAAsBA,WAAU,SAAS;AAExD,QAAIA,WAAU,eAAe;AACzB,iBAAW,IAAI,oBAAoBA,WAAU,cAAc,QAAQ;AACnE,iBAAW,IAAI,kBAAkBA,WAAU,cAAc,MAAM;AAAA,IACnE;AACA,QAAI,OAAO,qBAAqB;AAI5B,UAAI,CAAC,aAAa;AACd,sBAAc,YAAY,KAAK,sBAAsB,EAChD,KAAK,sBAAoB;AAE1B,gBAAM,cAAc,wBAAoB,YAAAC,SAAK;AAE7C,cAAI,CAAC,kBAAkB;AACnB,wBAAY,KAAK,wBAAwB,WAAW;AAAA,UACxD;AAEA,qBAAW;AACX,iBAAO;AAAA,QACX,CAAC;AAAA,MACL;AACA,UAAI,UAAU;AAEV,mBAAW,IAAI,aAAa,QAAQ;AAAA,MACxC,OACK;AAED,eAAO,YACF,KAAK,CAAAC,cAAY;AAClB,qBAAW,IAAI,aAAaA,SAAQ;AACpC,iBAAO;AAAA,QACX,CAAC;AAAA,MACL;AAAA,IACJ;AACA,WAAO,QAAQ,QAAQ,UAAU;AAAA,EACrC;AACJ;;;AC/CA,IAAM,6BAA6B,CAACC,cAAa;AAC7C,QAAM,oBAAoB;AAAA,IACtB,KAAK;AAAA,MACD,MAAM;AAAA,MACN,UAAU,MAAMA,UAAS,SAAS;AAAA,MAClC,WAAW;AAAA,IACf;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU,MAAMA,UAAS;AAAA,MACzB,WAAW;AAAA,IACf;AAAA,EACJ;AACA,SAAO;AAAA,IACH,UAAU,eAAe;AACrB,wBAAkB,MAAM,YAAY,cAAc,mBAAmB,SAAS;AAC9E,wBAAkB,IAAI,YAAY,cAAc,mBAAmB,OAAO;AAAA,IAC9E;AAAA,IACA,kBAAkB,MAAM;AACpB,iBAAW,aAAa,OAAO,OAAO,iBAAiB,GAAG;AACtD,YAAI,UAAU,WAAW;AACrB,eAAK,aAAa,UAAU,MAAM,UAAU,SAAS,CAAC;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC1BA,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAYC,cAAa,OAAO,0BAA0B;AACtD,SAAK,cAAcA;AACnB,SAAK,QAAQ;AACb,SAAK,YAAY,CAAC;AAClB,QAAI,4BAA4B,MAAM,QAAQ,yBAAyB,mBAAmB,GAAG;AACzF,YAAM,sBAAsB,yBAAyB;AACrD,UAAI,oBAAoB,SAAS,0BAA0B,GAAG;AAC1D,aAAK,8BAA8B,wBAAwB;AAAA,MAC/D;AACA,UAAI,oBAAoB,SAAS,cAAc,GAAG;AAC9C,aAAK,mBAAmB,wBAAwB;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,MAAM;AACX,UAAM,uBAAuB,KAAK,qBAAqB;AACvD,QAAI,sBAAsB;AACtB,WAAK,SAAS,OAAO,oBAAoB;AAAA,IAC7C;AACA,UAAM,kBAAkB,KAAK,gBAAgB;AAC7C,QAAI,iBAAiB;AACjB,WAAK,SAAS,QAAQ,eAAe;AAAA,IACzC;AACA,UAAM,kBAAkB,KAAK,gBAAgB;AAC7C,QAAI,iBAAiB;AACjB,WAAK,SAAS,aAAa,gBAAgB,KAAK;AAChD,WAAK,SAAS,WAAW,gBAAgB,GAAG;AAAA,IAChD;AACA,QAAI,KAAK,uBAAuB;AAC5B,WAAK,aAAa,uBAAuB,KAAK,qBAAqB;AAAA,IACvE;AACA,QAAI,KAAK,wBAAwB;AAC7B,WAAK,SAAS,OAAO,KAAK,sBAAsB;AAAA,IACpD;AAGA,eAAW,YAAY,KAAK,WAAW;AACnC,eAAS,WAAW;AAAA,IACxB;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,UAAM,UAAU,KAAK,YAAY,iBAAiB,0BAA0B,OAAO;AACnF,UAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,QAAQ,CAAC;AACjD,QAAI,OAAO;AACP,aAAO,MAAM;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,UAAM,UAAU,KAAK,YAAY,iBAAiB,YAAY;AAC9D,UAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,QAAQ,CAAC;AACjD,QAAI;AACJ,QAAI,OAAO;AACP,sBAAgB,MAAM;AAAA,IAC1B,OACK;AACD,sBAAgB,KAAK,YAAY,OAAO,gBAAgB,KAAK,YAAY,OAAO;AAAA,IACpF;AAIA,QAAI,gBAAgB,KAAK,iBAAiB,KAAK,MAAM,IAAI,GAAG;AACxD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,UAAM,UAAU,KAAK,YAAY,iBAAiB,aAAa;AAC/D,UAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,QAAQ,CAAC;AACjD,QAAI,OAAO;AACP,aAAO;AAAA,QACH,OAAO,MAAM;AAAA,QACb,KAAK,MAAM;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,8BAA8B,0BAA0B;AACpD,UAAM,WAAW,IAAI,yBAAyB,CAAC,SAAS;AACpD,YAAM,UAAU,KAAK,WAAW;AAChC,UAAI,QAAQ,SAAS,GAAG;AAEpB,aAAK,yBAAyB,QAAQ,QAAQ,SAAS,CAAC,EAAE;AAAA,MAC9D;AAAA,IACJ,CAAC;AACD,aAAS,QAAQ,EAAE,MAAM,4BAA4B,UAAU,KAAK,CAAC;AACrE,SAAK,UAAU,KAAK,QAAQ;AAAA,EAChC;AAAA,EACA,mBAAmB,0BAA0B;AACzC,QAAI;AACJ,UAAM,WAAW,IAAI,yBAAyB,CAAC,SAAS;AACpD,iBAAW,SAAS,KAAK,WAAW,GAAG;AAInC,YAAI,MAAM,gBAAgB;AACtB;AAAA,QACJ;AAKA,YAAI,WACA,MAAM,YAAY,QAAQ,oBAAoB,OAC9C,MAAM,YAAY,QAAQ,iBAAiB,KAAM;AACjD,kBAAQ,SAAS,MAAM;AACvB,kBAAQ,oBAAoB,MAAM;AAAA,QACtC,OACK;AACD,oBAAU;AAAA,YACN,OAAO,MAAM;AAAA,YACb,gBAAgB,MAAM;AAAA,YACtB,mBAAmB,MAAM;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,YACC,KAAK,0BAA0B,UAAa,QAAQ,QAAQ,KAAK,wBAAwB;AAC1F,aAAK,wBAAwB,QAAQ;AAAA,MACzC;AAAA,IACJ,CAAC;AACD,aAAS,QAAQ,EAAE,MAAM,gBAAgB,UAAU,KAAK,CAAC;AACzD,SAAK,UAAU,KAAK,QAAQ;AAAA,EAChC;AACJ;;;ACxGA,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI,OAAO,WAAW,eAAe,OAAO,aAAa,aAAa;AAClE,aAAW,mBAAmB;AAC9B,2BAAyB,0BAA0B;AACnD,uBAAqB,iBAAiB;AAC1C,OACK;AACD,QAAM,wBAAwB,mCAAmC,MAAM;AACvE,QAAM,uBAAuB,2BAA2B,QAAQ;AAChE,QAAM,QAAQ,YAAY,aAAa,qBAAqB;AAC5D,QAAM,cAAc,uBAAuB,MAAM;AACjD,QAAM,2BAA2B,+BAA+B,WAAW,WAAW;AACtF,QAAM,sBAAsB,0BAA0B,QAAQ,KAAK;AACnE,QAAM,oBAAoB,4BAA4B,gBAAgB,OAAO,QAAQ;AACrF,QAAM,YAAY,IAAI,UAAU,aAAa,OAAO,OAAO,mBAAmB;AAC9E,aAAW,eAAe,OAAO,QAAQ,qBAAqB,mBAAmB,WAAW;AAC5F,2BAAyB,6BAA6B,UAAU,OAAO,QAAQ;AAC/E,uBAAqB,aAAa;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB,2BAA2B,OAAO,OAAO,OAAO,qBAAqB;AAAA,IACtF;AAAA,IACA,QAAQ,aAAa,OAAO,SAAS,UAAU,IAAI,uBAAuB,CAAC;AAAA,IAC3E,SAAS,CAAC,aAAa,uBAAuB;AAAA,MAC1C;AAAA,MACA,IAAI,mBAAmB,UAAU,OAAO,UAAU,aAAa,WAAW,UAAU,uBAAuB,WAAW;AAAA;AAAA;AAAA,MAGtH,IAAI,mBAAmB,aAAa,oBAAoB,OAAO,mBAAmB;AAAA,MAClF,IAAI,qBAAqB,aAAa,oBAAoB,qBAAqB,iBAAiB;AAAA,MAChG,IAAI,kBAAkB,aAAa,OAAO,UAAU,QAAQ;AAAA,IAChE;AAAA,IACA;AAAA,IACA,mBAAmB,CAAC,UAAU,sBAAsB,IAAI,cAAc,UAAU,iBAAiB;AAAA,EACrG,CAAC;AACL;AACA,IAAM,uBAAuB;",
  "names": ["cuid", "schema", "startTime", "samplingProbability", "idGenerator", "parentContext", "schema", "payload", "startTime", "document", "startTime", "performance", "parentContext", "onSettle", "document", "onSettle", "performance", "parentContext", "document", "options", "route", "window", "performance", "addEventListener", "performance", "document", "window", "performance", "onSettle", "settledTime", "window", "navigator", "cuid", "deviceId", "document", "performance"]
}
