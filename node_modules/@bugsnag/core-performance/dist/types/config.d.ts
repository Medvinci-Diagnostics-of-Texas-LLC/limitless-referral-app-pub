import { type Plugin } from './plugin';
export interface Logger {
    debug: (message: string) => void;
    info: (message: string) => void;
    warn: (message: string) => void;
    error: (message: string) => void;
}
export interface Configuration {
    apiKey: string;
    endpoint?: string;
    releaseStage?: string;
    logger?: Logger;
    appVersion?: string;
    enabledReleaseStages?: string[] | null;
    samplingProbability?: number;
    plugins?: Array<Plugin<Configuration>>;
}
export interface TestConfiguration {
    maximumBatchSize: number;
    batchInactivityTimeoutMs: number;
    retryQueueMaxSize: number;
}
export type InternalConfiguration<C extends Configuration> = Required<C> & Required<Configuration> & TestConfiguration;
export interface ConfigOption<T> {
    message: string;
    defaultValue: T;
    validate: (value: unknown) => value is T;
}
type Schema = Record<string, ConfigOption<unknown>>;
export interface CoreSchema extends Schema {
    apiKey: ConfigOption<string>;
    endpoint: ConfigOption<string>;
    releaseStage: ConfigOption<string>;
    logger: ConfigOption<Logger>;
    appVersion: ConfigOption<string>;
    enabledReleaseStages: ConfigOption<string[] | null>;
    samplingProbability: ConfigOption<number>;
    plugins: ConfigOption<Array<Plugin<Configuration>>>;
}
export declare const schema: CoreSchema;
export declare function validateConfig<S extends CoreSchema, C extends Configuration>(config: unknown, schema: S): InternalConfiguration<C>;
export {};
//# sourceMappingURL=config.d.ts.map